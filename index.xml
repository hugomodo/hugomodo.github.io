<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A modular framework for Hugo on HugoModo</title>
    <link>https://hugomodo.github.io/</link>
    <description>Recent content in A modular framework for Hugo on HugoModo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jan 2019 01:20:15 +0000</lastBuildDate>
    
	<atom:link href="https://hugomodo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Picnic</title>
      <link>https://hugomodo.github.io/themes/picnic/</link>
      <pubDate>Mon, 21 Jan 2019 23:12:33 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/themes/picnic/</guid>
      <description>HugoModo Picnic Installation git submodule add https://github.com/hugomodo/hugomodo.git themes/hugomodo git submodule add https://github.com/hugomodo/hugomodo-picnic.git themes/hugomodo-picnicthemes = [ &amp;#34;hugomodo-picnic&amp;#34; ] Support on Patreon</description>
    </item>
    
    <item>
      <title>Table of Contents</title>
      <link>https://hugomodo.github.io/docs/table-of-contents/</link>
      <pubDate>Mon, 21 Jan 2019 20:09:38 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/docs/table-of-contents/</guid>
      <description>HugoModo features Hugo&amp;rsquo;s built-in support for generating a table of contents for a page.
This is off by default, and can be enabled or disabled for the entire site or individual pages.
Enable for your site Add this to your site&amp;rsquo;s config.toml file:
[Params] include_toc = true Enable for a single page If you only want it enabled for a single page, add this to your page&amp;rsquo;s frontmatter:
include_toc = true Disable for a single page To disable the table of contents for certain pages, add this to your page&amp;rsquo;s frontmatter:</description>
    </item>
    
    <item>
      <title>Hugo&#39;s Table of Contents</title>
      <link>https://hugomodo.github.io/blog/hugo-s-table-of-contents/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/hugo-s-table-of-contents/</guid>
      <description>If you&amp;rsquo;ve read my earlier blog entries, you&amp;rsquo;ll know that I don&amp;rsquo;t intend for HugoModo to supplant Hugo. I call it a &amp;lsquo;framework&amp;rsquo; but it&amp;rsquo;s really just a collection of themes. The aim is not to require a radically different, custom setup, but to work by-default with any Hugo site. And a part of achieving that is to do things the Hugo way, which means if a feature exists natively in Hugo I ought to utilise it, rather than provide an alternative that fragments HugoModo from the Hugo foundation it&amp;rsquo;s built on.</description>
    </item>
    
    <item>
      <title>Cookie Consent</title>
      <link>https://hugomodo.github.io/extensions/cookie-consent/</link>
      <pubDate>Wed, 16 Jan 2019 18:29:53 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/extensions/cookie-consent/</guid>
      <description> Cookie Consent Adds Cookie Consent modal to HugoModo sites, provided by Insites https://cookieconsent.insites.com/
Installation git submodule add https://github.com/hugomodo/hugomodo-cookie-consent.git themes/hugomodo-cookie-consentthemes = [ &amp;#34;hugomodo-cookie-consent&amp;#34;, ... ]</description>
    </item>
    
    <item>
      <title>Milligram</title>
      <link>https://hugomodo.github.io/themes/milligram/</link>
      <pubDate>Sat, 12 Jan 2019 15:01:17 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/themes/milligram/</guid>
      <description>HugoModo Milligram Based on Milligram by CJ Patoilo.</description>
    </item>
    
    <item>
      <title>An Opinionated Approach to Markup</title>
      <link>https://hugomodo.github.io/blog/an-opinionated-approach-to-markup/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/an-opinionated-approach-to-markup/</guid>
      <description>I was asked today how many users Hugomodo has at the moment. I expect the answer is actually just the one, and I kind of hope that&amp;rsquo;s the case for now too. I do have plans to introduce a sort of semantic versioning strategy for themes but it isn&amp;rsquo;t my immediate priority. So for the time being, HugoModo development is unstable. I&amp;rsquo;m still moving the pieces around before they settle into place.</description>
    </item>
    
    <item>
      <title>Hugo&#39;s Author and Authors</title>
      <link>https://hugomodo.github.io/blog/hugo-s-author-and-authors/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/hugo-s-author-and-authors/</guid>
      <description>HugoModo aims, best as it can, to do things the Hugo way. This means not superseding any functionality, and not providing a wildly different setup. Essentially, one should be able to build a Hugo site by following Hugo&amp;rsquo;s own docs, and that site should be compatible with HugoModo&amp;rsquo;s themes and extensions. And so far, I believe that&amp;rsquo;s true.
I characterise HugoModo as a framework built around Hugo that provides an approach to managing functionality in a way that I think a lot of developers will find more approachable.</description>
    </item>
    
    <item>
      <title>Updating Themes</title>
      <link>https://hugomodo.github.io/docs/updating-themes/</link>
      <pubDate>Sat, 05 Jan 2019 18:55:01 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/docs/updating-themes/</guid>
      <description>The recommended way to install HugoModo themes and extensions is as Git submodules.
If you have done this, the easiest way to bring your themes and extensions up to date with the latest versions is as so:
git submodule update --recursive --remote</description>
    </item>
    
    <item>
      <title>Fuse.js Static Site Search and GitLab Pages</title>
      <link>https://hugomodo.github.io/blog/static-site-search-and-gitlab-pages/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/static-site-search-and-gitlab-pages/</guid>
      <description>The greatest selling point of static sites over dynamic is also their greatest drawback. They&amp;rsquo;re essentially serverless. That means no logins, no dynamic rendering and no form submissions. Of course there are workarounds for all of these, and with the right setup nobody will be able to tell the difference.
So, how does search work? Classically, you&amp;rsquo;d require a server. Your search query would be delivered to the server, it would query its own database for matches, and the results would be returned with the next page load (or delivered as a parseable document in the case of dynamic queries made using JavaScript).</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://hugomodo.github.io/search/</link>
      <pubDate>Thu, 03 Jan 2019 03:26:04 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fusejs</title>
      <link>https://hugomodo.github.io/extensions/fusejs/</link>
      <pubDate>Thu, 03 Jan 2019 03:09:44 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/extensions/fusejs/</guid>
      <description>HugoModo FuseJS Adds site search functionality to Hugo sites.
Support on Beerpay Hey dude! Help me out for a couple of üçª!
 
Installation Follow the usual steps for installing a HugoModo extension, then:
 Add a JSON output for home in your site config:  [outputs] home = [ &amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;, &amp;#34;JSON&amp;#34; ]  Add a content file at content/search.md with frontmatter:  --- title: Search layout: search ---  That&amp;rsquo;s it!</description>
    </item>
    
    <item>
      <title>Image Processing and SVGs</title>
      <link>https://hugomodo.github.io/blog/image-processing-and-svgs/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/image-processing-and-svgs/</guid>
      <description>One of the first HugoModo extensions I&amp;rsquo;ve written is HugoModo Image Processing. This extension does a few things. By default it just provides a pair of shortcodes for Hugo that achieve image processing in content files. This is &amp;ldquo;the Hugo way&amp;rdquo;, so is the sensible behaviour. But we go beyond that.
A config setting may also be adjusted to have the extension interpret image markdown in the same way as it does shortcodes.</description>
    </item>
    
    <item>
      <title>Exif Orientation</title>
      <link>https://hugomodo.github.io/blog/exif-orientation/</link>
      <pubDate>Wed, 02 Jan 2019 13:05:15 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/exif-orientation/</guid>
      <description>When you take a picture with your camera or phone, you can do so holding the device at any of four orientations. When using my iPhone for instance, I can take a photo vertically holding my phone with the home button at the bottom, I can take a photo with the home button oriented to the left or the right, I could even take a photo with the home button at the top - my phone upside down.</description>
    </item>
    
    <item>
      <title>Build with Forestry</title>
      <link>https://hugomodo.github.io/docs/build-with-forestry/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/docs/build-with-forestry/</guid>
      <description>Forestry has some configuration settings that will allow automatic builds whenever content is updated via their dashboard.
I&amp;rsquo;ve just set this up and am publishing this post to check it out.
As Forestry remains our benchmark for compatibility, it will always be important that builds are successful from this source.
Unfortunately, it appears that Forestry can only handle project-based GitHub Pages, rather than user or organisation ones - which is what we want for HugoModo.</description>
    </item>
    
    <item>
      <title>The Trouble With Chroma, Hugo&#39;s Syntax Highlighting Library</title>
      <link>https://hugomodo.github.io/blog/the-trouble-with-chroma/</link>
      <pubDate>Mon, 31 Dec 2018 22:57:07 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/the-trouble-with-chroma/</guid>
      <description>One of the core principles of HugoModo is to stick to the Hugo way of doing things where possible and sensible to do so. This reduces the likelihood of incompatibility, and should make for greater ease of use for anyone familiar with Hugo or working from the Hugo documentation.
Of course, HugoModo deliberately does a lot differently, emphasising the principle of Convention over Configuration where Hugo otherwise emphasises speed. The aim is to achieve a comfortable middle-ground that remains blazing fast, but that also provides for greater ease of use and extension.</description>
    </item>
    
    <item>
      <title>Shortcode Partials</title>
      <link>https://hugomodo.github.io/extensions/shortcode-partials/</link>
      <pubDate>Mon, 31 Dec 2018 20:08:37 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/extensions/shortcode-partials/</guid>
      <description>HugoModo Shortcode Partials Provides the default Hugo shortcodes as a collection of partials for use in templates.
Support on Beerpay Hey dude! Help me out for a couple of üçª!
 
What&amp;rsquo;s the issue? HugoModo strives for third-party compatibility. The baseline for this is currently Forestry CMS. When asking the question, &amp;ldquo;does it work with Forestry CMS?&amp;rdquo; of the Image Processing extension, the answer was not yes - it was mostly.</description>
    </item>
    
    <item>
      <title>Forestry Compatible</title>
      <link>https://hugomodo.github.io/blog/forestry-compatible/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/forestry-compatible/</guid>
      <description>HugoModo is designed to be compatible with the static site, headless CMS, Forestry.
When you first hook a site up with Forestry, it assumes the same default behaviour that HugoModo does. In particular, this means images are stored in the static directory and are exempt from image processing.
But Forestry has offered configuration for using a content directory instead for quite a while now. Enabling this feature will store uploads as page resources, and will allow for the use of Hugo&amp;rsquo;s in-built image processing.</description>
    </item>
    
    <item>
      <title>Image Processing</title>
      <link>https://hugomodo.github.io/extensions/image-processing/</link>
      <pubDate>Sun, 30 Dec 2018 16:54:08 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/extensions/image-processing/</guid>
      <description>HugoModo Image Processing Image Processing for Hugo sites.
Shim HugoModo Image Processing includes a collection of shims for providing the same image processing treatment to markdown in your site&amp;rsquo;s content.
To activate it, create a file in your Hugo site at data/config/imageProcessing.toml with the content:
contentShim = true This will break other shortcodes on your site, so you may also want to install HugoModo Shortcode Partials, which contains shims to fix some of the shortcodes.</description>
    </item>
    
    <item>
      <title>Best Motherfucking Website</title>
      <link>https://hugomodo.github.io/themes/best-motherfucking-website/</link>
      <pubDate>Sat, 29 Dec 2018 14:39:14 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/themes/best-motherfucking-website/</guid>
      <description>HugoModo Best Motherfucking Website Based on The Best Motherfucking Website, this theme provides minimal style definitions to create a clean, highly readable theme to be used as the base for customisation or for websites with a minimalist feel.
Installation git submodule add https://github.com/hugomodo/hugomodo themes/hugomodo git submodule add https://github.com/hugomodo/hugomodo-best-motherfucking-website themes/hugomodo-best-motherfucking-websitethemes = [&amp;#34;hugomodo-best-motherfucking-website&amp;#34;] Support on Beerpay Hey dude! Help me out for a couple of üçª!</description>
    </item>
    
    <item>
      <title>Hugomodo</title>
      <link>https://hugomodo.github.io/themes/hugomodo/</link>
      <pubDate>Sat, 29 Dec 2018 14:38:59 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/themes/hugomodo/</guid>
      <description>HugoModo The base theme for HugoModo&amp;rsquo;s modular approach to Hugo website design. It provides the asset precompilation pipeline and bundler data files, clean and semantic HTML, and well-organised partials for ease of developing child themes.
It provides minimal styling, so is best used as the base for a child theme. HugoModo themes which depend on it will include this theme automatically.
Installation git submodule add https://github.com/hugomodo/hugomodo themes/hugomodothemes = [&amp;#34;hugomodo&amp;#34;] Support on Beerpay Hey dude!</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://hugomodo.github.io/docs/shortcodes/</link>
      <pubDate>Sat, 29 Dec 2018 12:58:37 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/docs/shortcodes/</guid>
      <description>Hugo All of the standard Hugo shortcodes work with HugoModo by default.
Those listed below also work with the shims provided by the Shortcode Partials extension.
figure Markup {{&amp;lt; figure src=&amp;#34;/img/mountaineer.jpg&amp;#34; title=&amp;#34;A walk with a view.&amp;#34; &amp;gt;}} Example   A walk with a view.   gist Markup {{&amp;lt; gist spf13 7896402 &amp;gt;}} Example  highlight Markup {{&amp;lt; highlight go-html-template &amp;gt;}} &amp;lt;section id=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h1 id=&amp;#34;title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; {{ range .</description>
    </item>
    
    <item>
      <title>Hugo Goes Modular</title>
      <link>https://hugomodo.github.io/blog/hugo-goes-modular/</link>
      <pubDate>Sat, 29 Dec 2018 01:11:18 +0000</pubDate>
      
      <guid>https://hugomodo.github.io/blog/hugo-goes-modular/</guid>
      <description>A Better Base HugoModo removes the main content div from Hugo&amp;rsquo;s default base template, and adds a new partial called the &amp;lsquo;foot&amp;rsquo;. The aim is to follow certain best practices. We want to keep markup to a minimum, and where possible to only use HTML5&amp;rsquo;s semantic elements (&amp;lsquo;main&amp;rsquo;, &amp;lsquo;section&amp;rsquo;, etc. rather than &amp;lsquo;div&amp;rsquo;). And the foot partial is provided mainly to load scripts after the main content, so as to provide for fast page rendering to visitors.</description>
    </item>
    
  </channel>
</rss>