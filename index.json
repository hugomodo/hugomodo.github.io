[{"categories":null,"contents":"The recommended way to install HugoModo themes and extensions is as Git submodules.\nIf you have done this, the easiest way to bring your themes and extensions up to date with the latest versions is as so:\ngit submodule update --recursive --remote","permalink":"https://hugomodo.github.io/docs/updating-themes/","tags":null,"title":"Updating Themes"},{"categories":null,"contents":"The greatest selling point of static sites over dynamic is also their greatest drawback. They\u0026rsquo;re essentially serverless. That means no logins, no dynamic rendering and no form submissions. Of course there are workarounds for all of these, and with the right setup nobody will be able to tell the difference.\nSo, how does search work? Classically, you\u0026rsquo;d require a server. Your search query would be delivered to the server, it would query its own database for matches, and the results would be returned with the next page load (or delivered as a parseable document in the case of dynamic queries made using JavaScript).\nOne way in which static sites work around this limitation is by using a third-party API server. Essentially, you provide that server with your indexed content, they store it in their database, and then you can query the API for search results. This works, but I fear it produces two related issues. First, it\u0026rsquo;s an extra dependency we don\u0026rsquo;t necessarily want. And second, that index will need updated which means finding a way to communicate with the API when content is updated (it would be tedious to have to manually update the index every single time).\nWith HugoModo, I\u0026rsquo;m initially trying to keep dependencies on the lighter side. If it\u0026rsquo;s possible without a server dependency, all the better. And it is! Which is why I put together an extension that uses Fuse.js.\nHugoModo FuseJS provides a search page template, a JSON index layout and the JavaScript files required to get it all working. That JSON index is the same as the index those third-party providers would expect, so this is a necessary step anyway. And once we have it, why not use it ourselves?\nSo that\u0026rsquo;s how our extension handles it: it queries that index, created with our site and stored publicly.\nAnd it just works! \u0026hellip;in GitHub Pages, in Netlify\u0026hellip;\n\u0026hellip;but not in GitLab Pages. I was surprised. You might be surprised too. The reason it doesn\u0026rsquo;t work appears to be the very same thing that we thought we were getting away from by choosing a static site generator like Hugo: it seems the server is to blame.\nSo, yes, static sites aren\u0026rsquo;t strictly serverless. They just run on very minimal servers. And when we submit a search form on our site in GitLab Pages in particular, their servers appear to be stripping the query parameters and redirecting to the search results page, albeit without the necessary search query. I go into further detail in an issue I opened on the GitLab Pages repo: #191.\nFrustrating, but perhaps submitting the query as a full page request was never the right way to handle it anyway. This has prompted me to make that Fuse.js extension a little niftier.\nWe work around the problem like so:\njQuery(\u0026quot;#search-query\u0026quot;).parent().submit(function( event ) { if(jQuery(\u0026quot;#search-query\u0026quot;).val()){ executeSearch(jQuery(\u0026quot;#search-query\u0026quot;).val()); } else { jQuery('#search-results').html(\u0026quot;\u0026lt;p\u0026gt;Please enter a word or phrase above\u0026lt;/p\u0026gt;\u0026quot;); } event.preventDefault(); });  Yup, sadly jQuery is still a dependency for now. I\u0026rsquo;m working on it!\nSo, above we hijack the .submit function, and importantly at the bottom there we preventDefault() behaviour which would be to submit the form alongside a page request. Instead, if a value is present we execute our search using that value, the script for which is, and always has been, run as JavaScript on the page (we can\u0026rsquo;t use a server, remember). You may peruse the full file if you wish, here: HugoModo FuseJS Search Script, based on a GitHub Gist by eddiewebb.\nProblem solved then. Search results are now loaded, or more accurately displayed, without a page refresh.\nBut I do hope that GitLab Pages can support form submissions in the future. Silly as they may seem on static sites, they do still open up a lot of possibilities!\n","permalink":"https://hugomodo.github.io/blog/static-site-search-and-gitlab-pages/","tags":null,"title":"Fuse.js Static Site Search and GitLab Pages"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/search/","tags":null,"title":"Search"},{"categories":null,"contents":" Installation Follow the usual steps for installing a HugoModo extension, then:\n Add a JSON output for home in your site config:  [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34; ]  Add a content file at content/search.md with frontmatter:  --- title: Search layout: search ---  That\u0026rsquo;s it! Were you expecting extra steps? Load up your site and visit /search to see it working.  Roadmap  Searchbar partial for inclusion in templates.  ","permalink":"https://hugomodo.github.io/extensions/fusejs/","tags":null,"title":"Fusejs"},{"categories":null,"contents":"One of the first HugoModo extensions I\u0026rsquo;ve written is HugoModo Image Processing. This extension does a few things. By default it just provides a pair of shortcodes for Hugo that achieve image processing in content files. This is \u0026ldquo;the Hugo way\u0026rdquo;, so is the sensible behaviour. But we go beyond that.\nA config setting may also be adjusted to have the extension interpret image markdown in the same way as it does shortcodes. Let\u0026rsquo;s call this \u0026ldquo;the markdown way\u0026rdquo;, because Hugo shortcodes aren\u0026rsquo;t valid markdown but with this setting configured we achieve the same shortcode behaviour with valid content that any other interpreter will display as normal.\nThat\u0026rsquo;s all fine, until we come to think about image formats and in particular SVGs.\nSVGs aren\u0026rsquo;t like other images, especially not to Hugo. Hugo doesn\u0026rsquo;t interpret these graphics files as images and it doesn\u0026rsquo;t have any means of performing processing on them (but they\u0026rsquo;re lossless, so why would it need to?).\nHugoModo Image Processing, however, does need to be aware of these files, which might be stored and presented alongside other images in a site\u0026rsquo;s content. If they aren\u0026rsquo;t filtered out before reaching the image processing steps, Hugo will throw an error and our sites won\u0026rsquo;t be built. So, let\u0026rsquo;s solve this problem now!\nHere, we have the Hugo logo:\nI\u0026rsquo;ve added that here, and to the page\u0026rsquo;s metadata for interpretation by the script for Open Graph images in my site\u0026rsquo;s head (these are the images Facebook uses to display a picture when you share a link).\nThe first thing I notice, adding this in Forestry\u0026rsquo;s editor is\u0026hellip; it doesn\u0026rsquo;t display in Forestry\u0026rsquo;s editor. The entity is there, it simply isn\u0026rsquo;t showing in the body of text. I imagine this will be different when I preview the site so I\u0026rsquo;m going to save this file and move to the next step\u0026hellip;\nAs should be expected, an error:\nexecute of template failed: template: partials/image-processing/imgproc.html:13:10: executing \u0026quot;partials/image-processing/imgproc.html\u0026quot; at \u0026lt;.Resize\u0026gt;: can't evaluate field Resize in type resource.Resource  If I turn off my content shims we avoid this, but then we lack image processing and, in fact, all shortcode functionality.\nFor content files, Hugo provides a handy .File.Ext variable for looking at a file\u0026rsquo;s extension. But with our approach to image processing, we are using a string to find a Hugo Resource. Neither\u0026rsquo;s a content file, so it won\u0026rsquo;t work here. We\u0026rsquo;ll have to examine the string instead for its extension.\nTo do this, we\u0026rsquo;ll split the string on . like so:\n{{ $pathArr := split $src \u0026quot;.\u0026quot; }} {{ $pathLen := len $pathArr }} {{ $ext := index $pathArr (sub $pathLen 1) }}  We already have the $src var, it\u0026rsquo;s simply the path to the image. And now before we do anything else with it, we can check whether its extension is equal to svg like so:\n{{ if eq $ext \u0026quot;svg\u0026quot; }}  We then act on that accordingly, using a different block than we will for further image processing.\nUnfortunately, this hasn\u0026rsquo;t immediately worked. It looks like some pre-existing steps I\u0026rsquo;ve taken strip the path to my uploads folder from the src string. I should refactor a little to improve the approach, but for a quick fix while I still have the uploads context kicking around I simply:\n{{ printf \u0026quot;/%s%s\u0026quot; .context.Dir $src }}  .context is a variable I\u0026rsquo;ve passed to this partial, and represents the resource bundle itself (in my case \u0026ldquo;uploads\u0026rdquo;). The .Dir variable provides the path to the folder containing that bundle, and we\u0026rsquo;ve already discussed $src. The rest merely combines those two variables back into the original source path. A hack for now, but a working one.\nThat handles SVGs in my content files. I now see the above image displaying when I build my site (which means you will too, hurray!).\nNext steps are to duplicate the behaviour in other locations its needed, but where the output needs to be a little different. And then that refactor I talked about. I think there\u0026rsquo;s a more ideal way we can achieve this, so I\u0026rsquo;ll have a play around with that.\nFor now: SVGs and image processing working together! Brilliant.\n","permalink":"https://hugomodo.github.io/blog/image-processing-and-svgs/","tags":null,"title":"Image Processing and SVGs"},{"categories":null,"contents":" When you take a picture with your camera or phone, you can do so holding the device at any of four orientations. When using my iPhone for instance, I can take a photo vertically holding my phone with the home button at the bottom, I can take a photo with the home button oriented to the left or the right, I could even take a photo with the home button at the top - my phone upside down.\nWhen one takes a snap on a modern device, the device itself will factor in orientation and store a little snippet of information along with the image in what\u0026rsquo;s called Exif metadata. So when I\u0026rsquo;m flicking through the gallery on my phone, I tend to see my images oriented correctly. When I transfer them to my computer, the same is true when I\u0026rsquo;m looking at them in the file system. Both devices know that despite the orientation of my phone at the time of taking the picture, I want to see the image as it was taken in reality. This is the most common expected user experience, and our devices are very good at intuiting how we\u0026rsquo;d like to see these images.\nThat said, here\u0026rsquo;s a photo of a duck:\nMy phone and laptop know to show me this image the right way up, but Hugo doesn\u0026rsquo;t (yet).\nThe above photo was added directly to my site offline via a text editor. A simple copy and paste from one folder to another. No magic is happening, because there\u0026rsquo;s no room for it to.\nNext, we\u0026rsquo;ll try adding the same image via Forestry (HugoModo\u0026rsquo;s benchmark for compatibility):\nThe same image again, still displayed with incorrect orientation by default. And it looks as though Forestry currently lacks native image editing or processing capabilities (although it sounds like they have it in the works, as well).\nWe have some options\u0026hellip; Hugo\u0026rsquo;s image processing functionality does already provide the possibility to rotate images, but this must currently be done manually and per image - as noted above, it seems Hugo yet lacks awareness of Exif info. This could be a cumbersome undertaking for an end user with a photo gallery on their site, particularly if they have no development experience.\nHugo is set to gain that information, with a working implementation already. But it looks like we\u0026rsquo;re waiting on an upstream bugfix before it finds its way into a release.\nSo I will revisit this at that time.\nFortunately, for now, there is another way. Forestry have a partnership with the actually phenomenal image storage service, Cloudinary who I believe handle this issue by default.\nOne final test. Here\u0026rsquo;s that duck again:\nOops. The orientation of our duck here was corrected in both Forestry and Cloudinary\u0026rsquo;s media dashboards, but is still showing sideways in our content.\nSo as a final correction, it looks like we still have to adjust that URL. Not ideal. But this is where Cloudinary shines.\nCloudinary takes a parameter for the angle of an image like so:\nhttps://res.cloudinary.com/example/a_90/image.jpg  The a_90 tells Cloudinary we want that image rotated 90 degrees, and it will serve us just that.\nThis isn\u0026rsquo;t what we want in this case, as Cloudinary displays the image corrected by default, at least in the dashboard. So we add a_0 instead, to tell Cloudinary we want this image served the right way up:\nHey presto!\nIs this ideal? No. It still took some work to get us to this point, where we\u0026rsquo;d like to just upload our images and have 0 degrees be considered the default orientation.\nI will continue to look into this.\n","permalink":"https://hugomodo.github.io/blog/exif-orientation/","tags":null,"title":"Exif Orientation"},{"categories":null,"contents":"HugoModo is a collection of themes and extensions for the Hugo static site generator. The aim is to take the benefits of Hugo\u0026rsquo;s incredible speed and flexibility, and to achieve the same comforts and conventions of other frameworks. HugoModo aims to make Hugo the best of both worlds.\n","permalink":"https://hugomodo.github.io/","tags":null,"title":"A modular framework for Hugo"},{"categories":null,"contents":"Forestry has some configuration settings that will allow automatic builds whenever content is updated via their dashboard.\nI\u0026rsquo;ve just set this up and am publishing this post to check it out.\nAs Forestry remains our benchmark for compatibility, it will always be important that builds are successful from this source.\nUnfortunately, it appears that Forestry can only handle project-based GitHub Pages, rather than user or organisation ones - which is what we want for HugoModo.\nI will revisit this and document the approach for project-based sites at another time, but Forestry have a great guide themselves should you need it.\nFor the time being, where it comes to HugoModo, I\u0026rsquo;m going to see if deployment via a CI service such as TravisCI is feasible.\nAnd do you know what? It is. There are a lot of blog posts from others online with setups that vary in complexity. None are as simple as this:\n# Clean and don\u0026#39;t fail install: - rm -rf public || exit 0 # Build the website script: - bin/hugo deploy: provider: pages skip-cleanup: true github-token: $GITHUB_TOKEN # Set in the settings page of your repository, as a secure variable keep-history: true local-dir: public repo: hugomodo/hugomodo.github.io allow-empty-commit: true target-branch: master on: branch: master This is mostly TravisCI\u0026rsquo;s own suggested configuration for publishing to GitHub Pages, with the exception of adding the local-dir, repo, allow-empty-commit and target-branch options. These tell Travis to publish the contents of public to our separate GitHub Pages repo at hugomodo/hugomodo.github.io and to push those contents to the master branch. allow-empty-commit: true is added in case of build failure, so that the site can be rebuilt without changes.\nThe only other required setup is to add a GitHub token to the repo config in TravisCI, and provide Hugo as a binary in the bin folder.\n","permalink":"https://hugomodo.github.io/docs/build-with-forestry/","tags":null,"title":"Build with Forestry"},{"categories":null,"contents":"One of the core principles of HugoModo is to stick to the Hugo way of doing things where possible and sensible to do so. This reduces the likelihood of incompatibility, and should make for greater ease of use for anyone familiar with Hugo or working from the Hugo documentation.\nOf course, HugoModo deliberately does a lot differently, emphasising the principle of Convention over Configuration where Hugo otherwise emphasises speed. The aim is to achieve a comfortable middle-ground that remains blazing fast, but that also provides for greater ease of use and extension.\nI just don\u0026rsquo;t yet know what to do about Chroma.\nChroma is Hugo\u0026rsquo;s in-built syntax highlighter, for rendering beautiful code samples like this one:\n{{ if .IsPage }} {{ .Content }} {{ end }} At the time of writing, this code sample is being interpreted by Chroma and displayed with inline style declarations.\nChroma has a couple of different flavours though. The default is these inline styles, but Hugo also provides a configuration option and CSS generator to serve Chroma syntax highlighting with classes used and styles served from a separate stylesheet.\nThing is, neither of these approaches is really the HugoModo way.\nAnother principle of HugoModo is HTML minimalism. By this I mean that the markup is intended to be clear of style declarations and class attributes. Unless strictly necessary, I believe that HTML should be free from both, with a CSS file doing the heavy lifting to style a page. If necessary later, an additional script should be invoked to inline above-the-fold styles, for instance. The point is separation of scope in development: HTML files should be strictly markup, CSS should have almost total authority when it comes to styling.\nHugoModo will continue to support Chroma for now. But I am beginning to wonder\u0026hellip; is it the HugoModo way?\n","permalink":"https://hugomodo.github.io/blog/the-trouble-with-chroma/","tags":null,"title":"The Trouble With Chroma, Hugo's Syntax Highlighting Library"},{"categories":null,"contents":" What\u0026rsquo;s the issue? HugoModo strives for third-party compatibility. The baseline for this is currently Forestry CMS. When asking the question, \u0026ldquo;does it work with Forestry CMS?\u0026rdquo; of the Image Processing extension, the answer was not yes - it was mostly.\nThe problem is, Forestry is unaware of shortcodes. These could be hand-typed by a developer easily, but when it comes to non-technical authors adding images to content, they probably aren\u0026rsquo;t going to do that. And as a matter of usability, I also prefer to use the GUI to add content to a post. On Forestry, this results in a markdown declaration.\nNo assessment of the size of the image is performed, and so the result is the raw output of - more than likely - an oversized image.\nHugoModo Image Processing aims to circumvent that issue with an interpreter of its own for outputting content. But while this interpreter then succeeds in producing resized image resources, it breaks all of the other shortcodes that can be used in Hugo.\nThe solution HugoModo Shortcode Partials aims to provide all of the existing Hugo shortcodes as partials, as well as an override for content interpretation. This solves the problem above, and provides a clear best practise for adding additional shortcodes.\nThis is not recommended Where absolutely possible, it is better to do without overriding Hugo\u0026rsquo;s own .Content function. Using this shim and/or the Image Processing override may lead to a severe decrease in performance.\nIt is provided as a convenience, for anywhere markdown reinterpretation is preferred.\n","permalink":"https://hugomodo.github.io/extensions/shortcode-partials/","tags":null,"title":"Shortcode Partials"},{"categories":null,"contents":"HugoModo is designed to be compatible with the static site, headless CMS, Forestry.\nWhen you first hook a site up with Forestry, it assumes the same default behaviour that HugoModo does. In particular, this means images are stored in the static directory and are exempt from image processing.\nBut Forestry has offered configuration for using a content directory instead for quite a while now. Enabling this feature will store uploads as page resources, and will allow for the use of Hugo\u0026rsquo;s in-built image processing.\nThis can be activated in HugoModo by installing the HugoModo Image Processing extension.\nBy default, HugoModo Image Processing will assume the use of page bundles to store images. This is the de facto Hugo way, but is currently unsupported by Forestry. But just one extra step gets us to where we need to be.\nHugoModo Image Processing can be configured to look for and use any content directory for image resources.\nTo turn this on, simply add a file at data/imageProcessing/config.toml with the content:\nuploadsDir = \u0026quot;uploads\u0026quot;  This can be any path you like, but the folder should exist in your site\u0026rsquo;s content directory, and should contain an index.md set to act as a headless bundle.\nThe following image has been uploaded in Forestry\u0026rsquo;s dashboard:\nUnfortunately, inline images cannot be added via the Forestry dashboard and handled automatically by HugoModo\u0026rsquo;s image processing shortcodes.\nThis is something I am looking to remedy. Watch this space.\n","permalink":"https://hugomodo.github.io/blog/forestry-compatible/","tags":null,"title":"Forestry Compatible"},{"categories":null,"contents":" Description Features  Provides imgproc and figproc shortcodes for image processing in your content files. Uses srcset to load responsive image sizes on different screen resolutions. Can be configured to use Page Bundles, a headless Resources bundle, or both!  Todo  Equivalents for theme layouts are provided: image-processing/imgproc.html and image-processing/figproc.html.  These already exist. Modification required so that context can be passed.  Option to override existing figure shortcode. Additional imgcrop shortcode using .Fill image processing function to crop images to given dimensions. Potentially an imgfit shortcode as well, using .Fit. Could be useful for masonry layouts. Support for featured and thumbnail images in page frontmatter and site config. Support for opengraph and other meta tag images to be resized appropriately. Support for sizes attribute alongside srcset; allow this to be altered in config. Consider having minSize and maxSize settings in config and per proc.  Allowing these to be set where used will help to reduce repo bloat.  Add support for social and search graph image resizing.  opengraph schema twitter cards structured data   Installation From your Hugo site\u0026rsquo;s root directory:\nRecommended\ngit submodule add https://github.com/hugomodo/hugomodo-image-processing.git themes/hugomodo-image-processing Or:\ncd themes git clone https://github.com/hugomodo/hugomodo-image-processing.git Then add hugomodo-image-processing to your site\u0026rsquo;s themes in config.toml. Because it is considered an extension, it should be listed above any other HugoModo themes:\nthemes = [ \u0026#34;hugomodo-image-processing\u0026#34;, ... ] Configuration HugoModo Image Processing can be configured one of two ways. The default is to use Hugo\u0026rsquo;s Page Bundles, but an alternative approach using an uploads directory that provides compatibility with third party Content Management Systems can be setup with minimal configuration.\nPage Bundles By default, HugoModo Image Processing uses Page Bundles as described by the Hugo docs: Page Bundles\nNo additional configuration is required to use HugoModo Image Processing this way.\nUploads Directory You can configure HugoModo Image Processing to use an uploads directory instead, for compatibility with some Content Management Systems such as Forestry who write up the idea behind the uploads directory here: How To Use Hugo\u0026rsquo;s Image Processing With Forestry\nThe HugoModo implementation is a little bit different, but fully compatible with Forestry at the time of writing.\nTo set it up add a file to your site at data/imageProcessing/config.toml with the following configuration:\nuploadsDir = \u0026#34;uploads\u0026#34; \u0026hellip;and that\u0026rsquo;s it! You can now add your images to a content/uploads directory and have HugoModo\u0026rsquo;s image processing shortcodes will look for your resources there instead.\n\u0026hellip;or both! It is also possible to mix the two approaches. If the src string passed to imgproc contains a directory structure, it will look for your images in the given directory:\n{{\u0026lt; imgproc src=\u0026#34;/uploads/jakob-owens-212555-unsplash.jpg\u0026#34; \u0026gt;}} Shortcodes imgproc {{\u0026lt; imgproc src=\u0026#34;fabian-grohs-423591-unsplash.jpg\u0026#34; \u0026gt;}} figproc {{\u0026lt; figproc src=\u0026#34;fabian-grohs-423591-unsplash.jpg\u0026#34; caption=\u0026#34;Computer on a desk\u0026#34; \u0026gt;}}   Computer on a desk\n  ","permalink":"https://hugomodo.github.io/extensions/image-processing/","tags":null,"title":"Image Processing"},{"categories":null,"contents":"Based on The Best Motherfucking Website, this theme provides minimal style definitions to create a clean, highly readable theme to be used as the base for customisation or for websites with a minimalist feel.\n","permalink":"https://hugomodo.github.io/themes/best-motherfucking-website/","tags":null,"title":"Best Motherfucking Website"},{"categories":null,"contents":"The base theme for HugoModo\u0026rsquo;s modular approach to Hugo website design. It provides the asset precompilation pipeline and bundler data files, clean and semantic HTML, and well-organised partials for ease of developing child themes.\nIt provides minimal styling, so is best used as the base for a child theme. HugoModo themes which depend on it will include this theme automatically.\n","permalink":"https://hugomodo.github.io/themes/hugomodo/","tags":null,"title":"Hugomodo"},{"categories":null,"contents":" Hugo All of the standard Hugo shortcodes work with HugoModo by default.\nThose listed below also work with the shims provided by the Shortcode Partials extension.\nfigure Markup {{\u0026lt; figure src=\u0026#34;/img/mountaineer.jpg\u0026#34; title=\u0026#34;A walk with a view.\u0026#34; \u0026gt;}} Example   A walk with a view.   gist Markup {{\u0026lt; gist spf13 7896402 \u0026gt;}} Example  highlight Markup {{\u0026lt; highlight go-html-template \u0026gt;}} \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{\u0026lt; /highlight \u0026gt;}} Example \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; Note: If you use one of the content shims provided by a HugoModo extension, the above shortcode example will fail. You should opt for markdown code fences instead. Check out the Hugo docs for setup instructions: Highlight in Code Fences.\n}} ``` ##### Example   View this post on Instagram        #Talitha #Getty #yacht in #fjærland #fjærlandsfjorden #sognefjorden #mundal #norway #landscape #panorama #travel #instagoodmyphoto #justgoshoot #peoplescreatives #visualsoflife #photography #photoshoot #photodaily #photogram #instagood #picoftheday #fjærland #photooftheday #pentax #nrksf #sognavis\nA post shared by Bjørn Erik Pedersen (@bepsays) on Jul 6, 2017 at 9:27am PDT\n  #### param *Requires Hugo version 0.52 or higher* ##### Markup ``` html {{}} ``` ##### Example Built-in Hugo shortcodes and custom shortcodes provided by HugoModo. #### ref and relref ##### Markup ``` markdown [Hugo Goes Modular]({{}}) [List Pages]({{}}) ``` ##### Example [Hugo Goes Modular](https://hugomodo.github.io/blog/hugo-goes-modular/) [List Pages](/blog/hugo-goes-modular/#list-pages) #### tweet ##### Markup ``` html {{}} ``` ##### Example Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays\n\u0026mdash; GoHugo.io (@GoHugoIO) June 21, 2017  #### vimeo ##### Markup ``` html {{}} ``` ##### Example   #### youtube ##### Markup ``` html {{}} ``` ##### Example   --- HugoModo HugoModo will extend the standard set of shortcodes. Take a look at the extensions library for a complete list.\n","permalink":"https://hugomodo.github.io/docs/shortcodes/","tags":null,"title":"Shortcodes"},{"categories":null,"contents":"The latest news from the HugoModo project.\n","permalink":"https://hugomodo.github.io/blog/","tags":null,"title":"Blog"},{"categories":null,"contents":" A Better Base HugoModo removes the main content div from Hugo\u0026rsquo;s default base template, and adds a new partial called the \u0026lsquo;foot\u0026rsquo;. The aim is to follow certain best practices. We want to keep markup to a minimum, and where possible to only use HTML5\u0026rsquo;s semantic elements (\u0026lsquo;main\u0026rsquo;, \u0026lsquo;section\u0026rsquo;, etc. rather than \u0026lsquo;div\u0026rsquo;). And the foot partial is provided mainly to load scripts after the main content, so as to provide for fast page rendering to visitors.\nThe Hugo Way \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . -}} \u0026lt;body\u0026gt; {{- partial \u0026#34;header.html\u0026#34; . -}} \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{- end }} \u0026lt;/div\u0026gt; {{- partial \u0026#34;footer.html\u0026#34; . -}} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The HugoModo Way \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . -}} \u0026lt;body\u0026gt; {{- partial \u0026#34;header.html\u0026#34; . -}} {{- block \u0026#34;main\u0026#34; . }}{{- end }} {{- partial \u0026#34;footer.html\u0026#34; . -}} {{- partial \u0026#34;foot.html\u0026#34; . -}} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Theme Partial Organisation Hugo themes are easy to extend and make adjustments to by overwriting partials. Many themes however are comprised of partials that do an enormous amount. In order to change one small detail, the entire partial must be copied across. And if the base theme then receives an update, it can be a chore to find small changes in those files to upgrade your child theme or site.\nHugoModo aims to solve this problem by reducing partials to tightly scoped directories. Rather than having one \u0026lsquo;head\u0026rsquo; partial, HugoModo\u0026rsquo;s \u0026lsquo;head\u0026rsquo; calls on many child partials in partials/head. Any one can be overwritten without throwing the rest of the theme out of sync with the upstream, meaning easier upgrades and lower maintenance over time.\nList Pages Because Hugo builds sites that reflect the directory structure of its content files precisely, it is easy to create deeply nested pages.\nThere is no list page behaviour by default, but the standard practise is to just list .RegularPages for each section. However, this is a poor reflection of Hugo\u0026rsquo;s fuller capabilities which allows for sections inside of sections, and deeply nested collections of pages.\nHugoModo includes a default list template that combines and sorts a section\u0026rsquo;s child sections and pages, listing and paginating them together.\nSuperior Asset Bundling Hugo hasn\u0026rsquo;t always had great support for CSS and JavaScript assets. It still doesn\u0026rsquo;t have the greatest, but it\u0026rsquo;s moving in the right direction.\nHugoModo gives Hugo a gentle nudge slightly further. It uses Hugo\u0026rsquo;s support for data files to provide a single location where JavaScript and SASS resources may be listed. The included js and scss resource partials read these resource lists, concatenate and minify the named files.\nIt\u0026rsquo;s a lot like Ruby\u0026rsquo;s Bundler, or NPM. Basically a pseudo package manager for Hugo. It\u0026rsquo;s awesome!\nAnd this is where HugoModo gets truly modular. Regardless of how many child themes or extensions you invoke in your site, the resource bundler collects all of the associated assets and bundles them for you.\n","permalink":"https://hugomodo.github.io/blog/hugo-goes-modular/","tags":null,"title":"Hugo Goes Modular"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/docs/","tags":null,"title":"Docs"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/extensions/","tags":null,"title":"Extensions"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/themes/","tags":null,"title":"Themes"}]