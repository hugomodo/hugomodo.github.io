[{"categories":null,"contents":" With the release of HugoModo version 0.1, I\u0026rsquo;ve turned my consideration to the child themes which inherit its features. The plan is to introduce versioning to these as well, but also an additional flavour called standalone. So as well as a 0.1.0 branch, child themes will also feature a 0.1.0-standalone branch and release files that will ultimately make it easier to use HugoModo themes that may have one or two to many levels of inheritance. At present, to use a HugoModo theme one must also download and include the base theme in their project. This is a minimal inconvenience when the theming goes just a couple of levels deep, but as I add more themes and adaptations of child themes, it\u0026rsquo;s going to potentially become a bit of a burden, and certainly it goes against the goal to make HugoModo easy to use.\nHow HugoModo Currently Works Let\u0026rsquo;s take the first theme I\u0026rsquo;ve developed for HugoModo, based on the excellent The Best Motherfucking Website by Denys Vitali. The theme is called HugoModo Best Motherfucking Website, and to use it requires you take two steps.\nFirst, you have to add not only that theme but the base HugoModo theme to your Hugo site. That might look a little something like this:\ngit submodule add https://github.com/hugomodo/hugomodo themes/hugomodo git submodule add https://github.com/hugomodo/hugomodo-best-motherfucking-website themes/hugomodo-best-motherfucking-website Then, you need to utilise the themes in your project. The child theme already includes the base theme for you, so you only need to add this to your Hugo config:\ntheme = [ \u0026#34;hugomodo-best-motherfucking-website\u0026#34; ] Nothing too complicated. But as we add themes that might inherit from the child theme, then additional themes that inherit from those (as is likely to be the case as I adapt a number of Bootstrap templates), that first step is going to become a big one. That won\u0026rsquo;t do.\nBetter would be, regardless of the depth of inheritance, a single step like so:\ngit submodule add -b standalone https://github.com/hugomodo/hugomodo-best-motherfucking-website themes/hugomodo-best-motherfucking-website One command with just one small change, the option to use the standalone branch with -b standalone.\nThat\u0026rsquo;s the future of HugoModo, I just need to figure out how to achieve it.\nSubmodules within Submodules This is the first method I\u0026rsquo;ve tried. I\u0026rsquo;d been super hopeful about it for a long time, and it mostly works.\nSee, when you\u0026rsquo;re inside a Git submodule, it\u0026rsquo;s just like any other repo. It is just another repo, which means it can also have submodules included.\nMy cunning plan to incorporate the base theme into standalone versions of child themes was to include the base theme in a themes directory within the child theme, which itself of course would be in the Hugo site\u0026rsquo;s themes directory.\nThen, rather than including theme = [\u0026quot;hugomodo\u0026quot;] in a child theme, I would instead include in the theme config:\ntheme = [ \u0026#34;hugomodo-best-motherfucking-website/themes/hugomodo\u0026#34; ] I was hesitant about this setup, but in my early tests it worked!\nThere were drawbacks. This would only really work for one level of theme inheritance, where down the line I might go several themes deep. But this could be worked around inheriting from the standalone branches of those intermediary themes - a sort of chain of standalone inheritance. That would be absolutely fine.\nBut I\u0026rsquo;ve made some changes to how HugoModo works recently. Changes for the better - they make it more extendible, more modular (the Modo in HugoModo).\nIn my most recent attempt to work through this approach, I\u0026rsquo;ve ran up against a wall with data files. In the submodule-based standalone version, Hugo can no longer locate the data files of the base theme, which I\u0026rsquo;ve used to make resource and asset extendibility a breeze.\nSince I won\u0026rsquo;t rollback the resource extendibility, this method is now a no-go.\nCopy Theme Files This is the other option, and while it isn\u0026rsquo;t ideal I think it\u0026rsquo;s going to be the only way to have this work.\nThe idea is to create a standalone branch which reflects the current state of the main developments on master, then to copy files from the parent theme respecting and not replacing any that already exist in the child theme. This can be achieved relatively easily, like so:\ncp -rn hugomodo hugomodo-best-motherfucking-website The r and n flags tell the copy command to perform the copy recursively - meaning all files in all subdirectories - and to \u0026ldquo;not clobber\u0026rdquo; the destination files - meaning don\u0026rsquo;t replace anything if it already exists. This way, the child theme will gain all of the files present in the parent but any overwrites will be respected and remain untouched.\nThe full process then is to checkout the standalone branch, reset it to the state of master, and copy the parent theme\u0026rsquo;s files:\ngit checkout standalone git reset master --hard cp -rn ../hugomodo/. . As you can see, I\u0026rsquo;ve slightly modified the cp command so it can be performed from the destination directory. ../hugomodo/. means look upwards one directory level for the hugomodo directory, and copy its root contents. . doesn\u0026rsquo;t really mean root directory, but for our purposes it\u0026rsquo;s a fair explanation. The final . on its own means the current directory. In plain English, go up one directory level, find hugomodo, copy its root contents into the current directory; do so recursively, respecting any files which already exist. Or copy recursive no-clobber hugomodo into this directory.\nFollowing this, the state of the standalone branch will be a match to the master development branch plus the contents of the parent theme. Enough then to stand alone. We commit the changes and push to GitHub:\ngit add -A git commit -m \u0026#34;rebuild standalone from master\u0026#34; git push origin standalone --force We have to force push here, because of our earlier reset - it destroys the branch history.\nWith that, I\u0026hellip; almost have a perfect standalone branch. There\u0026rsquo;s just one more thing. After reseting to the state of master but before copying the parent files, I have to add:\nrm -f config.toml This rm removes the file config.toml, and does so forcefully. We need to remove the child theme config file, because it\u0026rsquo;s what tells Hugo to also look for a parent theme, which we won\u0026rsquo;t be using with this setup. We also need to adopt the config of the parent theme, to ensure that the default configuration settings are inherited.\nAnd with that, we have a standalone branch. I\u0026rsquo;ve automated the entire task with a Travis CI job, the full configuration for which is this:\n- stage: standalone script: - git checkout -B standalone - git reset master --hard - rm -f config.toml - cp -rn ../hugomodo/. . || true - git add -A - git commit -m \u0026#34;rebuild from master\u0026#34; - git push -u origin standalone --force git checkout -B does a forceful branching from master into our target branch, standalone. Strictly, I think the -B flag renders the reset redundant, since it\u0026rsquo;s a forceful rebranch of the state of master, but I\u0026rsquo;ve left the reset in for good measure. I added the -B so as to not assume the prior existence of the standalone branch - if it exists, that\u0026rsquo;s fine, but if not this will make sure that it does. For that reason, I also have to say git push -u. The -u tells git to consider this destination the authority for this branch, which given that it\u0026rsquo;s a new one (-B) we don\u0026rsquo;t yet have; it\u0026rsquo;s shorthand for --set-upstream.\nThere\u0026rsquo;s only one change here I don\u0026rsquo;t understand, and that\u0026rsquo;s this: cp -rn ../hugomodo/. . || true. For some reason, the cp command was returning an error code and yet\u0026hellip; it was/is working. I have no idea why at this time, so || true is a hack that says or return true or if what comes before this errors or fails, return true instead. The line doesn\u0026rsquo;t fail, but it returns a code like it does, hence the need for that.\nAnyway, hey! That\u0026rsquo;s standalone branches done!\nHugoModo Best Motherfucking Website now comes in a standalone flavour that doesn\u0026rsquo;t require the base theme to work. Much easier installs for those who don\u0026rsquo;t need the bleeding edge versions.\nI\u0026rsquo;ll be documenting the much improved installation process soon.\n","permalink":"https://hugomodo.github.io/blog/considerations-for-standalone-theme-releases/","tags":null,"title":"Considerations for Standalone Theme Releases"},{"categories":null,"contents":" Hugo v0.54.0 is Released Today is the day I\u0026rsquo;ve been waiting for. I\u0026rsquo;ve had a keen eye on Hugo\u0026rsquo;s v0.54 milestone for a while now. I know that it was delayed, pushed back, and then - surprise! - released ahead of the rescheduled date.\nThe new version contains fixes for some issues I\u0026rsquo;ve banged my head against while developing HugoModo. There\u0026rsquo;s a fix for getJSON causing build aborts, which is something I ran into when trying to have the theme and extension pages of this very website load README files from their respective repos - time to revisit that, I guess. There\u0026rsquo;s also the introduction of full and proper semver; the release is v0.54.0 rather than v0.54. A big discussion about that change can be found here: https://github.com/gohugoio/hugo/issues/5639.\nBut most importantly for HugoModo, slash handling in taxonomies has been fixed.\nHad you asked me yesterday what version of Hugo would give you the best experience with HugoModo, I\u0026rsquo;d have likely said v0.47. This is the version I\u0026rsquo;ve been using on my own blog, because I like being able to list taxonomies beneath site sections; a bit like this: author/genres. This is a helpful feature when a site has many sections that aren\u0026rsquo;t necessarily related by tags. Over on my personal website, in fact, I\u0026rsquo;ve used the typical tags taxonomy as well as a developer/tags taxonomy that is strictly for tagging my software projects. There\u0026rsquo;s clear use for the distinction in keeping distinct sections organised and clean of other sections\u0026rsquo; descriptors. Like JLKM who opened the issue on Hugo, I would be inclined to agree taxonomies are one of the things that makes Hugo stand out from other static site generators.\nI\u0026rsquo;m so happy they\u0026rsquo;re back! And now I can recommend the very latest version of Hugo for use with HugoModo: version 0.54.0.\nHugoModo v0.1 is Released In other news, I\u0026rsquo;ve started to introduce versioning to the HugoModo project with the release of version 0.1.\nSemver doesn\u0026rsquo;t matter as much to a project like HugoModo, and I missed the discussion about semver above before putting out this release\u0026hellip; so I\u0026rsquo;m undecided as to whether I\u0026rsquo;ll adopt full and proper semver with future releases. It doesn\u0026rsquo;t matter, because HugoModo is not a module and so it isn\u0026rsquo;t something that will be pulled into other software projects. It is still just a theme for Hugo. But I expect I\u0026rsquo;ll adopt the practise, just to better mirror Hugo releases.\nSpeaking of which, HugoModo will continue to ride Hugo\u0026rsquo;s coattails, so to speak, up to the first major release of Hugo v1.0.0. It doesn\u0026rsquo;t seem right to me that HugoModo jump ahead and declare itself a major, stable release when Hugo - which it of course depends so greatly on - has not.\nBut why use semantic versioning at all? HugoModo is just a theme!\nWith the release of v0.1, I\u0026rsquo;ve also setup some automation to handle release branching. A couple of things will happen when I tag a release:\n GitHub will create a ZIP file and tarball of the repo at that point in time Travis CI will create a new branch based on the version number and push it to GitHub  This means two additional ways to install a stable version of HugoModo. One, you can download either of the compressed files. Or two, you can use Git submodules and reference a versioned branch. I think that will work, I haven\u0026rsquo;t yet tested it.\nThat second approach (assuming it works) will become the recommended way to install HugoModo. It will provide a stable, unchanging version of the project that you can update whenever you choose simply by altering the version number in your .gitmodules file and running an update.\nI\u0026rsquo;ve described this as an effort to simulate package management for Hugo websites, and that is a pretty close approximation of package management.\nAnd that\u0026rsquo;s the news! Big day, big week for HugoModo. Small changes with big effects; the project is now very close to its goal of being easy to install, easy to update and stable.\n","permalink":"https://hugomodo.github.io/blog/on-hugo-s-coattails/","tags":null,"title":"On Hugo's Coattails"},{"categories":null,"contents":" I put off redoing the menu setup for HugoModo for a little while. Hugo\u0026rsquo;s menu system, I remembered, was a challenge I\u0026rsquo;d previously overcome. The required changes were going to take, I dunno, anywhere from a few hours to a day. But I was wrong. Hugo\u0026rsquo;s menu system is actually very simple, and I was done in a matter of minutes.\nThe reason I thought it was going to be difficult is because I\u0026rsquo;d previously made it difficult for myself, but the result of that was a powerful default menu behaviour that went leagues beyond Hugo\u0026rsquo;s \u0026ldquo;Section Menu for Lazy Bloggers\u0026rdquo;. Hugo recommends that setup as a starting point, so we\u0026rsquo;ll start there too.\nHugo\u0026rsquo;s Section Menu for Lazy Bloggers Hugo\u0026rsquo;s Section Menu for Lazy Bloggers lists all site sections that have content. It\u0026rsquo;s a really quick and simple way to add site-wide navigation to a Hugo site.\nHere\u0026rsquo;s how I\u0026rsquo;ve implemented it in HugoModo:\n\u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; {{ $currentPage := . }} {{ range .Site.Menus.main }} \u0026lt;li\u0026gt; \u0026lt;a class=\u0026#34;sidebar-nav-item{{if or ($currentPage.IsMenuCurrent \u0026#34;main\u0026#34; .) ($currentPage.HasMenuCurrent \u0026#34;main\u0026#34; .) }}active{{end}}\u0026#34; href=\u0026#34;{{ .URL }}\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; As of today, HugoModo supports this menu with minimal setup. To activate this menu, all that\u0026rsquo;s needed is this line in your site\u0026rsquo;s config.toml file:\nsectionPagesMenu = \u0026#34;main\u0026#34; That\u0026rsquo;s it, you\u0026rsquo;re all set!\nHugoModo\u0026rsquo;s Super-Powered Default Menu Now, to the reason I had assumed I was in for a challenge with menus! I did this some time back when I wasn\u0026rsquo;t as well-versed in Hugo\u0026rsquo;s architecture as I am now., so at the time it took a lot of effort. And yet, it now looks so deceptively simple:\n\u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; {{ $sections := .Site.Sections }} {{ $pages := where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;\u0026#34; }} {{ range (union $sections $pages) }} {{ if not (eq .Name .Site.Title) }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; You\u0026rsquo;ll see there the standard markup for an unordered HTML menu, the elements used: \u0026lt;nav\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt; and \u0026lt;a\u0026gt;.\nYou\u0026rsquo;ll notice my menu also includes a site\u0026rsquo;s sections, via the $sections variable. But it also brings in some of a site\u0026rsquo;s pages. Here\u0026rsquo;s the all-important line:\n{{ $pages := where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;\u0026#34; }} The where query here finds only those pages whose Section is blank. This is effectively asking, \u0026ldquo;is it in the root folder?\u0026rdquo;\nThe resultant set of sections and pages is the collection of those at the root of the Hugo content folder.\ncontent/ blog/ \u0026lt;- Appears in menu my-first-blog-post.md career/ \u0026lt;- Appears in menu experience/ my-first-job.md projects/ my-project.md _index.md about.md \u0026lt;- Appears in menu contact.md \u0026lt;- Appears in menu Contrast to Hugo\u0026rsquo;s lazy menu:\ncontent/ blog/\t\u0026lt;- Appears in menu my-first-blog-post.md career/ experience/ \u0026lt;- Appears in menu my-first-job.md projects/ \u0026lt;- Appears in menu my-project.md _index.md about.md contact.md With the basic setup, Hugo does not list our about or contact pages in the main menu. It also skips root sections that contain no content files and shows deeper sections that do.\nHugo\u0026rsquo;s menu is a great way to get started for really simple websites. But I think the HugoModo default presents a stronger starting point for complex site structures.\nImportantly, neither limits what you can do with menus. For even greater control, you can still manually configure menu entries in a couple of ways.\nAdding Menu Items With either of the above configured, adding menu items works just as it would with any other Hugo site.\nYou can add menu items to your site config:\n[menu] [[menu.main]] name = \u0026#34;about\u0026#34; url = \u0026#34;/about/\u0026#34; Or you can add them to your content frontmatter:\n--- menu: \u0026#34;main\u0026#34; --- Instead of the lazy sections menu or the HugoModo default, the menu will now be populated by the items specified in your site config or content frontmatter (or indeed both).\nConsult Hugo\u0026rsquo;s own documentation for further possibilities.\n","permalink":"https://hugomodo.github.io/blog/a-super-powered-default-menu/","tags":null,"title":"A Super-Powered Default Menu"},{"categories":null,"contents":" HugoModo Picnic Installation git submodule add https://github.com/hugomodo/hugomodo.git themes/hugomodo git submodule add https://github.com/hugomodo/hugomodo-picnic.git themes/hugomodo-picnicthemes = [ \u0026#34;hugomodo-picnic\u0026#34; ] Support on Patreon \n","permalink":"https://hugomodo.github.io/themes/picnic/","tags":null,"title":"Picnic"},{"categories":null,"contents":" HugoModo features Hugo\u0026rsquo;s built-in support for generating a table of contents for a page.\nThis is off by default, and can be enabled or disabled for the entire site or individual pages.\nEnable for your site Add this to your site\u0026rsquo;s config.toml file:\n[Params] include_toc = true Enable for a single page If you only want it enabled for a single page, add this to your page\u0026rsquo;s frontmatter:\ninclude_toc = true Disable for a single page To disable the table of contents for certain pages, add this to your page\u0026rsquo;s frontmatter:\ninclude_toc = false","permalink":"https://hugomodo.github.io/docs/table-of-contents/","tags":null,"title":"Table of Contents"},{"categories":null,"contents":" If you\u0026rsquo;ve read my earlier blog entries, you\u0026rsquo;ll know that I don\u0026rsquo;t intend for HugoModo to supplant Hugo. I call it a \u0026lsquo;framework\u0026rsquo; but it\u0026rsquo;s really just a collection of themes. The aim is not to require a radically different, custom setup, but to work by-default with any Hugo site. And a part of achieving that is to do things the Hugo way, which means if a feature exists natively in Hugo I ought to utilise it, rather than provide an alternative that fragments HugoModo from the Hugo foundation it\u0026rsquo;s built on.\nSo\u0026hellip; Hugo has this Table of Contents feature built in. Beautiful! If you have headers in your content markup, it just works. It creates a list from those headers, wraps that list in links and a ul element, and you\u0026rsquo;re done - instant table of contents.\nThat would be fine if I weren\u0026rsquo;t also intent on making HugoModo semantically correct and valid HTML. Y\u0026rsquo;see\u0026hellip; I\u0026rsquo;ve taken a bit of a workaround in my content files. To explain the situation, we need to talk about headers and we should begin with the site layout files.\nSite and Article Titles Every page on HugoModo features two titles by default: the title of the site and the title of the current page. Stripped of all other markup, they look like this:\n\u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Article Title\u0026lt;/h2\u0026gt; Because h# elements are more than just stylistic, they\u0026rsquo;re a semantic element parsed with meaning by search engines, there are some best practises as concerns their levels and nesting them. So given that my article titles use h2, then if I\u0026rsquo;m using any additional headers in my page content I will tend to start at h3.\n\u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Article Title\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Site and Article Titles\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Every page on HugoModo features two titles by default...\u0026lt;/p\u0026gt; With this approach, the page remains nice and semantic and easily parsed by web crawlers for search engine indexing.\nThe Table of Contents To include a table of contents in a layout in Hugo, one simply adds this:\n{{ .TableOfContents }} Quick, simple, automatic. And as described above it will wrap found headers in a list and anchor links, a bit like so:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#site-title\u0026#34;\u0026gt;Site Title\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#article-title\u0026#34;\u0026gt;Article Title\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#site-and-article-titles\u0026#34;\u0026gt;Site and Article Titles\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#the-table-of-contents\u0026#34;\u0026gt;The Table of Contents\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; That\u0026rsquo;s all automatic: nesting levels, anchor links, all of it. And in the example above, you can see no nesting level has been skipped\u0026hellip;\n\u0026hellip;but I\u0026rsquo;ve cheated there. \u0026lsquo;Site Title\u0026rsquo; and \u0026lsquo;Article Title\u0026rsquo; are not in the content. Those are stored and rendered separately as properties of the page. The first title in the content is actually \u0026lsquo;Site and Article Titles\u0026rsquo;, and it\u0026rsquo;s a h3. The actual output for this page at present would be:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#site-and-article-titles\u0026#34;\u0026gt;Site and Article Titles\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#the-table-of-contents\u0026#34;\u0026gt;The Table of Contents\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; The table of contents nests our list two whole levels before we get to our h3 titles. The result is\u0026hellip; ugly:\nAs you can see, we get two additional and unnecessary levels of nesting by default.\nA Semantically Dirty Solution The quickest way to resolve this is to do what actually I imagine end users will wind up doing, particularly non-technical users. That is to just start content titles at h1 and suffer the invalid HTML warnings, and perhaps also the small hit to SEO.\n\u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Article Title\u0026lt;/h2\u0026gt; \u0026lt;h1\u0026gt;Site and Article Titles\u0026lt;/h1\u0026gt; That will clean up our table of contents, but I don\u0026rsquo;t consider it an option. HugoModo should support semantically correct HTML by default, and it shouldn\u0026rsquo;t require an SEO hit just to provide cleaner presentation.\nThere\u0026rsquo;s got to be a better way.\nA Better h1 Okay, so maybe the problem is a little with my layout. We should take the opportunity to think a little about what an h1 should be. As search engines are going to consider this the most important header in indexing a page, it clearly makes sense to give priority to the page title - at present, I\u0026rsquo;m favouring the site title.\nThe actual SEO improvements for this will be negligible if they exist at all. And we\u0026rsquo;ll have to restyle our site title so it still appears like a leading header on the page, even though semantically it no longer is. Bootstrap has display headings for just this purpose, so I\u0026rsquo;ll follow their lead and use display-1 in place of h1 in my example below:\n\u0026lt;strong class=\u0026#34;display-1\u0026#34;\u0026gt;Site Title\u0026lt;/strong\u0026gt; \u0026lt;h1\u0026gt;Article Title\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Site and Article Titles\u0026lt;/h2\u0026gt; Okay, a decision to explain there. I\u0026rsquo;ve use strong for the site title because this semantically suggests that the enclosed text is important. In design, we might often use it just to make text bold\u0026hellip; but this isn\u0026rsquo;t actually its intended use. It does that, yes, but we can restyle it any way we choose to remove the bold properties. We should - and this is what I\u0026rsquo;ve done here - use it to mark important text, regardless of styling. (This choice may change when I come to do my accessibility overhaul, but for now it stands as reasonable.)\nNext, I\u0026rsquo;ve used h1 for the article title. Feels like the best choice as regards SEO and properly indexing the page. Probably best for accessibility too.\nBut\u0026hellip; a problem. My content titles now start at h2. One fewer levels of nesting, yes, but still we haven\u0026rsquo;t entirely resolved that table of contents issue.\nSo let\u0026rsquo;s look at what we have to support.\nTwo Kinds of People Let\u0026rsquo;s assume that developers, designers and technical users like myself will follow best practices and start their content titles at h2:\n\u0026lt;h1\u0026gt;Article Title\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Site and Article Titles\u0026lt;/h2\u0026gt; Those are our first kind of person.\nOur second kind are end users, non-technical website owners for whom the first kind of person have built a site using HugoModo. They are likely to give less consideration to header levels, and they will wind up breaking HTML validity, possibly accessibility and SEO this way, but we can\u0026rsquo;t save everybody, right? They\u0026rsquo;re going to start with h1 and nest downwards from there.\n\u0026lt;h1\u0026gt;Article Title\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;Site and Article Titles\u0026lt;/h1\u0026gt; Invalid, but they actually get the benefit of a prettier table of contents before I\u0026rsquo;ve even fixed the styling in a step to come.\nh1 is like h2 or h1.5 Quick note: Regardless of the theme or framework I\u0026rsquo;m using, the use of h1 is still going to result in BIG STYLING of the text. A little quick fix for that (not tested) might be:\nh1:not(:first-of-type) { @extend h2; } \u0026hellip;maybe. Just thinking out loud here. This will (or should) at least get any h1 but the first on the page to adopt the styling rules of a h2 instead.\nBut actually\u0026hellip; We don\u0026rsquo;t want it to be identical to an actual h2. We do still want to respect those users\u0026rsquo; nesting decisions. So probably better, rather than @extend h2 to do something more like font-size:2.25em; or whatever styling choices we have to make to have the result stylistically appear to be a \u0026ldquo;h1.5\u0026rdquo;, with size and weight somewhere between the main h1 and an h2.\nNo Headers There\u0026rsquo;s a little more to my template for a table of contents than just Hugo\u0026rsquo;s {{ .TableOfContents }}. I\u0026rsquo;ve added it to an aside and given it its own title, a h2 element. While the table of contents itself won\u0026rsquo;t render unless there are headers, we also want it to be the case that the aside, header and whole component do not render if that\u0026rsquo;s the case too.\nFortunately, we can also use the template function as a conditional and check it like so:\n{{ if .TableOfContents }} \u0026lt;aside\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;Table of Contents\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; {{ end }} Easy peasy. Hugo\u0026rsquo;s docs suggest a different conditional:\n{{ if and (gt .WordCount 400 ) (.Params.toc) }} That would prevent rendering the block on articles shorter than 400 words and where a toc variable has been left unset or set to false. I\u0026rsquo;ll come back to this consideration later, maybe combine my check with this one so that we ultimately don\u0026rsquo;t render it for short content, content without headers or content where toc is false. For now, I\u0026rsquo;ll stick with just the no-headers check.\nThe Current State of the ToC That second type of person, who\u0026rsquo;ll be using h1 through their content will already now get a table of contents without the empty levels of nesting.\nMeanwhile, I\u0026rsquo;ve changed most of the content files on this site to begin with h2 and the result is\u0026hellip;\nIt\u0026rsquo;s better than where we were. We still need to resolve that nesting issue, but it\u0026rsquo;s only the one level now\u0026hellip; should be easier.\nWe can\u0026rsquo;t just be rid of the first nesting level, as our type 2 people will then be missing a level. So we\u0026rsquo;ll have to style it in such a way as it remains present but is practically invisible.\nSo first things first, let\u0026rsquo;s get rid of the bullet points. They have got to go. We\u0026rsquo;ll also get rid of indentation and\u0026hellip; maybe bring it back afterwards based on certain conditions, but we might also consider denoting the nesting level using font-size instead.\nnav#TableOfContents { ul { padding:0; list-style-type: none; font-size:0.95em; } } That removes the indentation, removes the bullets and reduces the font-size on the ul elements contents. At this point, it would be useful to have the whole range of header elements to play with to ensure that the font-size never gets too small. em adjusts the size relative to the containing element, so each subsequent level will be, with the above style rules, 5% smaller than its parent. Let\u0026rsquo;s just throw down some dummy headers here:\nHeader 2 Header 3 Header 4 Header 5 Header 6 Adding Some Distinction The results of the styling above and the use of header levels down to level 6 is this:\nThat doesn\u0026rsquo;t look so bad. Incremental header steps don\u0026rsquo;t appear to change much in size, but there\u0026rsquo;s a clear difference between h2 and h6. And h6 isn\u0026rsquo;t so small as to be unreadable. 0.95em was probably the right choice for a quick fix, but will likely see some modification per theme.\nThe fact that incremental changes aren\u0026rsquo;t great is in our favour too, as the discrepancy between h1 and h2 isn\u0026rsquo;t great enough to be a problem for our two types of people.\nI want to re-add indentation now to add a little clarity, and I can\u0026rsquo;t pull off the same trick here. If h2 is our starting header, we want 0 padding on that. We can\u0026rsquo;t just add the padding to our ul rule, as even the empty levels still exist. The result is that menu items starting at the second or third level of indentation produce this unexplained margin when we\u0026rsquo;d prefer the \u0026ldquo;top level\u0026rdquo; item to be flush with the page title and content by default.\nMissing CSS3 Selectors and a Workaround One thing would be useful here which has been considered for the CSS spec before being abandoned: a content selector. If CSS had such a selector, we could use it to select the menu container based on the content it has, in our case determining that it lacks a link and is therefore an empty nesting level.\nThat isn\u0026rsquo;t in the spec. And neither is a parent selector, which we could alternatively use to select only li elements that are the parent of an a element.\nWhat we can use is the adjacent sibling combinator. So to add padding to subsequent levels that are not children of an empty level, we\u0026rsquo;ll do this:\na + ul { padding-left:1em; } As Good as it Gets\u0026hellip; For Now I\u0026rsquo;ve worked on this problem long enough for today and I\u0026rsquo;ve reached something I\u0026rsquo;m satisfied with. In the final result, I\u0026rsquo;ve commented out the font-size adjustment because I don\u0026rsquo;t feel it was adding anything. I may revisit - perhaps a second level decrease followed by subsequent levels at the same size would be preferable.\nHere\u0026rsquo;s the final SCSS:\nnav#TableOfContents { ul { padding: 0; list-style-type: none; // font-size:0.95em; a + ul { padding-left:1em; } } } Yep, that\u0026rsquo;ll do.\nI would be eager to reintroduce list-style-type as decimals for the top level followed by roman numerals beneath. But I\u0026rsquo;m slightly concerned by the results of an experiment in doing that. It works, but we also wind up with the decimal numbers for empty levels as well. Although with the positioning choices I\u0026rsquo;ve made, you can\u0026rsquo;t necessarily see them as they are covered by identical lower-level decimal numbers. But they are there\u0026hellip; and I can\u0026rsquo;t yet think of a solution for that.\nRegardless, here we have the finalised presentation (for now) of our table of contents:\nLooks\u0026hellip; good enough. It will be modified by themes, and that\u0026rsquo;s the next step for me - make sure it hasn\u0026rsquo;t broken the display of any of my current themes.\nNext Steps  As mentioned, I\u0026rsquo;d like to get numerals working without them also being displayed for empty levels. If I can find a pure CSS solution to this, I\u0026rsquo;ll implement it. At the moment, this will display by default if a page\u0026rsquo;s content contains headers. We should add the potential to turn it off/on with two variables:  .Params.include_toc .Site.Params.include_toc   Usually, I add HugoModo variables to a separate data file, but in this case the variable comes from Hugo\u0026rsquo;s own docs so it seems more appropriate to follow the pattern they establish for it there.\n","permalink":"https://hugomodo.github.io/blog/hugo-s-table-of-contents/","tags":null,"title":"Hugo's Table of Contents"},{"categories":null,"contents":" Cookie Consent Adds Cookie Consent modal to HugoModo sites, provided by Insites https://cookieconsent.insites.com/\nInstallation git submodule add https://github.com/hugomodo/hugomodo-cookie-consent.git themes/hugomodo-cookie-consentthemes = [ \u0026#34;hugomodo-cookie-consent\u0026#34;, ... ]","permalink":"https://hugomodo.github.io/extensions/cookie-consent/","tags":null,"title":"Cookie Consent"},{"categories":null,"contents":" HugoModo Milligram Based on Milligram by CJ Patoilo.\n","permalink":"https://hugomodo.github.io/themes/milligram/","tags":["minimalist"],"title":"Milligram"},{"categories":null,"contents":"I was asked today how many users Hugomodo has at the moment. I expect the answer is actually just the one, and I kind of hope that\u0026rsquo;s the case for now too. I do have plans to introduce a sort of semantic versioning strategy for themes but it isn\u0026rsquo;t my immediate priority. So for the time being, HugoModo development is unstable. I\u0026rsquo;m still moving the pieces around before they settle into place.\nFor instance, I now have some experimentation to do with HTML and SCSS. I have a philosophy in mind that is something I\u0026rsquo;ve wanted to try for a long time. I\u0026rsquo;m sure that I\u0026rsquo;ll discover along the way the reasons that others don\u0026rsquo;t do this. It seems to me it would be the obvious choice, and yet it\u0026rsquo;s hard to find discussion of this principle online (maybe I\u0026rsquo;m not looking hard enough).\nThat philosophy is this: HTML documents should contain as little markup as necessary and as few classes as necessary to achieve the desired structure and style.\nNow, I\u0026rsquo;m more developer than designer which may well be my major fault in considering what I intend to embark on here. But the thought first occurred to me when I discovered Tachyons.\nTachyons is a CSS toolkit that seems, at first glance, to be in total violation of what I\u0026rsquo;m talking about. Far from utilising as few classes as possible, Tachyons has many, many, many classes that may be used in conjunction on the same element to style it a myriad of different ways.\nIt is fantastic!\nBut if you\u0026rsquo;re using Tachyons that way, I argue there\u0026rsquo;s a better way.\nThat better way is a CSS preprocessor like SASS. Y\u0026rsquo;see, SASS allows you to write style rules like this:\n.my-selector { @extend .some-other-selector; } In that example, the .my-selector selector will obtain all of the style rules that .some-other-selector possesses, and any element in your HTML having the class .my-selector will be provided those styles.\nLet\u0026rsquo;s take a look at how we might one of Tachyons\u0026rsquo; styles in a practical example.\nTachyons provides the classes .underline and .ttc for use in HTML. The former does as it says, it underlines text, and .ttc is a text transform utility that will CAPITALISE the text of elements it is added to. Both might be handy for one of our header elements:\n\u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;h2 class=\u0026#34;underline ttc\u0026#34;\u0026gt;Article Title\u0026lt;/h2\u0026gt; With Tachyons loaded, the above markup would underline and capitalise the article title, but not the site title.\nBut let\u0026rsquo;s say we decide against using Tachyons, and instead fall back to using something a little more traditional, Bootstrap.\nSearching the docs for Bootstrap, I don\u0026rsquo;t see an underline utility. They give an example of underlining text using the \u0026lt;u\u0026gt; element, but I think that\u0026rsquo;s bad practise. They do meanwhile have .text-uppercase to capitalise text.\nTo preserve the styles, we now have to do this:\n\u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;h2 class=\u0026#34;text-uppercase\u0026#34;\u0026gt;\u0026lt;u\u0026gt;Article Title\u0026lt;/u\u0026gt;\u0026lt;/h2\u0026gt; The class is easily enough handled with a find and replace, but that \u0026lt;u\u0026gt; element has caused us a second problem. It\u0026rsquo;s not as easily inserted.\nBut if we instead had the following in our SCSS stylesheet:\n// Tachyons example h2 { @extend .underline; @extend .ttc; } We could replace that right there with the Bootstrap styling rules:\n// Bootstrap example h2 { @extend u; @extend .text-uppercase; } In theory, that does the trick. In principle, it is probably better to manually style that underline rather than extend u but I\u0026rsquo;ll leave that as is for illustrative purposes.\nI think it\u0026rsquo;s easy to see that keeping styling rules and decisions about their combination in the stylesheet is far more maintainable in the long term.\nRather than attaching two styling classes to our article titles, we might attach just the one class, say .article-title and style it with extensions and rules of its own in our SASS stylesheets. We might even extend another class or element with that class, and it would inherit all of the extensions that it has. SASS is Awesome!\nSo, with all of that in mind - as few styling artefacts as possible in markup, use a CSS preprocessor, use @extend - my aim is to have as few classes in my markup as possible. Preferably they should be purely semantic, describing the nature of the content they contain, not the nature of the style applied. I can then make my styling decisions in the SASS stylesheets.\nExample markup:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; ... \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;article class=\u0026#34;blog-post\u0026#34;\u0026gt; \u0026lt;figure class=\u0026#34;featured-image\u0026#34;\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Article Title\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section\u0026gt; ... \u0026lt;/section\u0026gt; \u0026lt;footer\u0026gt; ... \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; ... \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice the use of semantic HTML5 elements (not a div in sight yet) and the use of only two classes, blog-post and featured-image.\nWe don\u0026rsquo;t, for example, need to provide a class to either of the header elements, because they can be described perfectly well by the section they belong to, body or article.blog-post. We do add a class to article, because we might add a secondary article type, a product listing perhaps that we\u0026rsquo;d like to style differently.\nWe might also consider adding a class to the body, to differentiate between pages of blog posts and of product listings. \u0026lt;body class=\u0026quot;blog\u0026quot;\u0026gt; and \u0026lt;body class=\u0026quot;store\u0026quot;\u0026gt; for instance. And from that we could style every item on the page differently straight from the stylesheet.\nAnd given that we\u0026rsquo;ve used semantic HTML5 elements, we don\u0026rsquo;t have countless divs that need differentiating between. Although I should note that while I recommend this approach, these HTML5 elements should not be used merely for styling purposes but should absolutely also be descriptive of their contents. Do use _div_ for arbitrary styling of block-level elements (and _span_ incidentally for text, not _u_).\nI guess what I\u0026rsquo;m arguing for is an approach to styling that\u0026rsquo;s semantic, like the HTML it ought to be being applied to here in 2019 (I don\u0026rsquo;t blame you if you don\u0026rsquo;t - I\u0026rsquo;m as bad as you are for not keeping up).\nThe philosophy is simple:\n HTML should be clean and semantic. HTML classes should be few and semantic. CSS should do the heavy lifting.  Use a CSS preprocessor. Use @extend. Use variables, mixins, whatever.   This should mean minimal reconfiguration or easier refactoring if and when style frameworks are swapped out. Something that\u0026rsquo;s so important for the modularity of HugoModo. We\u0026rsquo;ll see how that pans out\u0026hellip;\nIf everything goes wrong, I\u0026rsquo;ll do a follow up with lessons learned. If not, I will return waving a beautifully styled flag and encouraging you all to join the revolution. Watch this space.\nUpdate: Writing for Smashing Magazine, Heydon seems to think I ought to go further! I\u0026rsquo;m not alone, huzzah!\n","permalink":"https://hugomodo.github.io/blog/an-opinionated-approach-to-markup/","tags":null,"title":"An Opinionated Approach to Markup"},{"categories":null,"contents":" HugoModo aims, best as it can, to do things the Hugo way. This means not superseding any functionality, and not providing a wildly different setup. Essentially, one should be able to build a Hugo site by following Hugo\u0026rsquo;s own docs, and that site should be compatible with HugoModo\u0026rsquo;s themes and extensions. And so far, I believe that\u0026rsquo;s true.\nI characterise HugoModo as a framework built around Hugo that provides an approach to managing functionality in a way that I think a lot of developers will find more approachable. HugoModo emulates package management, which is something that may always be lacking from Hugo simply because of the nature of the Go programming language\u0026hellip; I think. (Disclaimer: I don\u0026rsquo;t know enough about this problem).\nSo I\u0026rsquo;m quite happy to \u0026ldquo;extend\u0026rdquo; Hugo with my Image Processing extension, which activates a feature already present in Hugo and follows the established markup of Hugo\u0026rsquo;s own internal templates.\nIt\u0026rsquo;s a convenience to then be able to include that among the themes for my Hugo sites and just have it work!\nBut tonight I am faced with a problem.\nI believe that a common need of blogging websites is an authors list, with author pages displaying their articles. And at the moment, this is only proposed Hugo functionality.\nAt present, Hugo supports a single author by default in a site\u0026rsquo;s config:\nAuthor: givenName: John familyName: Doe displayName: John Doe It does extend a map of authors for a site via .Site.Authors, but I am unsure of how or even if this can be populated at present. Which means\u0026hellip; we\u0026rsquo;ll have to deviate from the path a little and rejoin Hugo along the way, when the Authors model is in a more complete state.\nThere exist many write-ups online for how to add authors to Hugo, and they differ greatly. We\u0026rsquo;re going to do the Netlify way, because it provides the discussed functionality with minimal configuration. And because Netlify are big proponents of the JAMstack and I dig that! ❤️\nThe Implementation For single-author sites we\u0026rsquo;re already set, as shown above. My intention then shall be to ensure that this continues to work either as a fallback or for sites that simply don\u0026rsquo;t need multiple authors. This will be easy enough to achieve. If a content page lists no authors, we simply use the fallback information. We will lack the content list page for the author this way, but if they are the sole author on the site this won\u0026rsquo;t matter: every list page is de facto a list of their content.\nAnd we will make the assumption that our new author pages will provide all of the same information as the Author config permits.\nThe first steps to activating an authors list for a site are ones we cannot take in a theme or extension (well, we could but it\u0026rsquo;s best we don\u0026rsquo;t). \u0026lsquo;Authors\u0026rsquo; needs to be configured as a taxonomy:\ntaxonomies: category: categories series: series tag: tags author: authors When you add a taxonomy in Hugo, you\u0026rsquo;re actually overwriting the hash of taxonomies Hugo assumes active by default. These are categories, series and tags. You can safely leave them out if you don\u0026rsquo;t want them.\nWith that done, we can now add authors in our content files as frontmatter:\ntitle: Some Piece of Content authors: - John Doe That\u0026rsquo;s it. When we now build our site, an author page will exist for listed author and all of his/her associated content will be shown there. In fact, HugoModo\u0026rsquo;s themes already output the author tag with each post. No further work needed.\nIn two really easy steps, we now have author pages. But they don\u0026rsquo;t tell us very much. They merely list an author\u0026rsquo;s name and content.\nFor customisable author pages, we\u0026rsquo;ll have to add a section for our authors taxonomy as well as a page for each author. The resultant directory structure should look something like this:\ncontent - authors - _index.md - john-doe - _index.md Both authors and john-doe here are what Hugo defines as Branch Bundles, designated by the presence of a _index.md file (don\u0026rsquo;t forget the underscore). This is important, as this will lead Hugo to interpret the author page as a collection, rather than as a single page. And this will enable Hugo to list the author\u0026rsquo;s content.\nNext Steps If authors were just another taxonomy, that would be the end of it. But they aren\u0026rsquo;t.\nWith the above setup, Hugo will now generate an index page listing the site\u0026rsquo;s authors, and a page for each author.\nTheme developers might like to know how to override these, and I personally find the Hugo docs perplexing on this subject. Hopefully this is a little clearer:\nTo override the authors index page, create a layout at:\n/layout/authors/terms.html To override the individual author page:\n/layout/authors/taxonomy.html Hugo will fallback to using the default layout for either, or a default list layout if present.\nAs for HugoModo\u0026hellip; It\u0026rsquo;s getting late now, so I\u0026rsquo;m going to finish this tomorrow.\nI\u0026rsquo;ll be adding a default authors taxonomy layout to the HugoModo base theme, that will check for the author params as provided by Hugo for single site authors. And I\u0026rsquo;ll be adding a fallback if these aren\u0026rsquo;t found to behave just as other taxonomies would.\nThat should provide a convention that I think Hugo will eventually settle on. When multi-author support is implemented, I will update HugoModo to behave accordingly. But with this setup, I don\u0026rsquo;t think very much will have to change at all.\n","permalink":"https://hugomodo.github.io/blog/hugo-s-author-and-authors/","tags":null,"title":"Hugo's Author and Authors"},{"categories":null,"contents":"The recommended way to install HugoModo themes and extensions is as Git submodules.\nIf you have done this, the easiest way to bring your themes and extensions up to date with the latest versions is as so:\ngit submodule update --recursive --remote","permalink":"https://hugomodo.github.io/docs/updating-themes/","tags":null,"title":"Updating Themes"},{"categories":null,"contents":"The greatest selling point of static sites over dynamic is also their greatest drawback. They\u0026rsquo;re essentially serverless. That means no logins, no dynamic rendering and no form submissions. Of course there are workarounds for all of these, and with the right setup nobody will be able to tell the difference.\nSo, how does search work? Classically, you\u0026rsquo;d require a server. Your search query would be delivered to the server, it would query its own database for matches, and the results would be returned with the next page load (or delivered as a parseable document in the case of dynamic queries made using JavaScript).\nOne way in which static sites work around this limitation is by using a third-party API server. Essentially, you provide that server with your indexed content, they store it in their database, and then you can query the API for search results. This works, but I fear it produces two related issues. First, it\u0026rsquo;s an extra dependency we don\u0026rsquo;t necessarily want. And second, that index will need updated which means finding a way to communicate with the API when content is updated (it would be tedious to have to manually update the index every single time).\nWith HugoModo, I\u0026rsquo;m initially trying to keep dependencies on the lighter side. If it\u0026rsquo;s possible without a server dependency, all the better. And it is! Which is why I put together an extension that uses Fuse.js.\nHugoModo FuseJS provides a search page template, a JSON index layout and the JavaScript files required to get it all working. That JSON index is the same as the index those third-party providers would expect, so this is a necessary step anyway. And once we have it, why not use it ourselves?\nSo that\u0026rsquo;s how our extension handles it: it queries that index, created with our site and stored publicly.\nAnd it just works! \u0026hellip;in GitHub Pages, in Netlify\u0026hellip;\n\u0026hellip;but not in GitLab Pages. I was surprised. You might be surprised too. The reason it doesn\u0026rsquo;t work appears to be the very same thing that we thought we were getting away from by choosing a static site generator like Hugo: it seems the server is to blame.\nSo, yes, static sites aren\u0026rsquo;t strictly serverless. They just run on very minimal servers. And when we submit a search form on our site in GitLab Pages in particular, their servers appear to be stripping the query parameters and redirecting to the search results page, albeit without the necessary search query. I go into further detail in an issue I opened on the GitLab Pages repo: #191.\nFrustrating, but perhaps submitting the query as a full page request was never the right way to handle it anyway. This has prompted me to make that Fuse.js extension a little niftier.\nWe work around the problem like so:\njQuery(\u0026#34;#search-query\u0026#34;).parent().submit(function( event ) { if(jQuery(\u0026#34;#search-query\u0026#34;).val()){ executeSearch(jQuery(\u0026#34;#search-query\u0026#34;).val()); } else { jQuery(\u0026#39;#search-results\u0026#39;).html(\u0026#34;\u0026lt;p\u0026gt;Please enter a word or phrase above\u0026lt;/p\u0026gt;\u0026#34;); } event.preventDefault(); });  Yup, sadly jQuery is still a dependency for now. I\u0026rsquo;m working on it!\nSo, above we hijack the .submit function, and importantly at the bottom there we preventDefault() behaviour which would be to submit the form alongside a page request. Instead, if a value is present we execute our search using that value, the script for which is, and always has been, run as JavaScript on the page (we can\u0026rsquo;t use a server, remember). You may peruse the full file if you wish, here: HugoModo FuseJS Search Script, based on a GitHub Gist by eddiewebb.\nProblem solved then. Search results are now loaded, or more accurately displayed, without a page refresh.\nBut I do hope that GitLab Pages can support form submissions in the future. Silly as they may seem on static sites, they do still open up a lot of possibilities!\n","permalink":"https://hugomodo.github.io/blog/static-site-search-and-gitlab-pages/","tags":null,"title":"Fuse.js Static Site Search and GitLab Pages"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/search/","tags":null,"title":"Search"},{"categories":null,"contents":" HugoModo FuseJS Adds site search functionality to Hugo sites.\nSupport on Beerpay Hey dude! Help me out for a couple of 🍻!\n \nInstallation Follow the usual steps for installing a HugoModo extension, then:\n Add a JSON output for home in your site config:  [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34; ]  Add a content file at content/search.md with frontmatter:  --- title: Search layout: search ---  That\u0026rsquo;s it! Were you expecting extra steps? Load up your site and visit /search to see it working.  Roadmap  Searchbar partial for inclusion in templates.  ","permalink":"https://hugomodo.github.io/extensions/fusejs/","tags":null,"title":"Fusejs"},{"categories":null,"contents":"One of the first HugoModo extensions I\u0026rsquo;ve written is HugoModo Image Processing. This extension does a few things. By default it just provides a pair of shortcodes for Hugo that achieve image processing in content files. This is \u0026ldquo;the Hugo way\u0026rdquo;, so is the sensible behaviour. But we go beyond that.\nA config setting may also be adjusted to have the extension interpret image markdown in the same way as it does shortcodes. Let\u0026rsquo;s call this \u0026ldquo;the markdown way\u0026rdquo;, because Hugo shortcodes aren\u0026rsquo;t valid markdown but with this setting configured we achieve the same shortcode behaviour with valid content that any other interpreter will display as normal.\nThat\u0026rsquo;s all fine, until we come to think about image formats and in particular SVGs.\nSVGs aren\u0026rsquo;t like other images, especially not to Hugo. Hugo doesn\u0026rsquo;t interpret these graphics files as images and it doesn\u0026rsquo;t have any means of performing processing on them (but they\u0026rsquo;re lossless, so why would it need to?).\nHugoModo Image Processing, however, does need to be aware of these files, which might be stored and presented alongside other images in a site\u0026rsquo;s content. If they aren\u0026rsquo;t filtered out before reaching the image processing steps, Hugo will throw an error and our sites won\u0026rsquo;t be built. So, let\u0026rsquo;s solve this problem now!\nHere, we have the Hugo logo:\nI\u0026rsquo;ve added that here, and to the page\u0026rsquo;s metadata for interpretation by the script for Open Graph images in my site\u0026rsquo;s head (these are the images Facebook uses to display a picture when you share a link).\nThe first thing I notice, adding this in Forestry\u0026rsquo;s editor is\u0026hellip; it doesn\u0026rsquo;t display in Forestry\u0026rsquo;s editor. The entity is there, it simply isn\u0026rsquo;t showing in the body of text. I imagine this will be different when I preview the site so I\u0026rsquo;m going to save this file and move to the next step\u0026hellip;\nAs should be expected, an error:\nexecute of template failed: template: partials/image-processing/imgproc.html:13:10: executing \u0026quot;partials/image-processing/imgproc.html\u0026quot; at \u0026lt;.Resize\u0026gt;: can't evaluate field Resize in type resource.Resource  If I turn off my content shims we avoid this, but then we lack image processing and, in fact, all shortcode functionality.\nFor content files, Hugo provides a handy .File.Ext variable for looking at a file\u0026rsquo;s extension. But with our approach to image processing, we are using a string to find a Hugo Resource. Neither\u0026rsquo;s a content file, so it won\u0026rsquo;t work here. We\u0026rsquo;ll have to examine the string instead for its extension.\nTo do this, we\u0026rsquo;ll split the string on . like so:\n{{ $pathArr := split $src \u0026#34;.\u0026#34; }} {{ $pathLen := len $pathArr }} {{ $ext := index $pathArr (sub $pathLen 1) }} We already have the $src var, it\u0026rsquo;s simply the path to the image. And now before we do anything else with it, we can check whether its extension is equal to svg like so:\n{{ if eq $ext \u0026#34;svg\u0026#34; }} We then act on that accordingly, using a different block than we will for further image processing.\nUnfortunately, this hasn\u0026rsquo;t immediately worked. It looks like some pre-existing steps I\u0026rsquo;ve taken strip the path to my uploads folder from the src string. I should refactor a little to improve the approach, but for a quick fix while I still have the uploads context kicking around I simply:\n{{ printf \u0026#34;/%s%s\u0026#34; .context.Dir $src }} .context is a variable I\u0026rsquo;ve passed to this partial, and represents the resource bundle itself (in my case \u0026ldquo;uploads\u0026rdquo;). The .Dir variable provides the path to the folder containing that bundle, and we\u0026rsquo;ve already discussed $src. The rest merely combines those two variables back into the original source path. A hack for now, but a working one.\nThat handles SVGs in my content files. I now see the above image displaying when I build my site (which means you will too, hurray!).\nNext steps are to duplicate the behaviour in other locations its needed, but where the output needs to be a little different. And then that refactor I talked about. I think there\u0026rsquo;s a more ideal way we can achieve this, so I\u0026rsquo;ll have a play around with that.\nFor now: SVGs and image processing working together! Brilliant.\n","permalink":"https://hugomodo.github.io/blog/image-processing-and-svgs/","tags":null,"title":"Image Processing and SVGs"},{"categories":null,"contents":" When you take a picture with your camera or phone, you can do so holding the device at any of four orientations. When using my iPhone for instance, I can take a photo vertically holding my phone with the home button at the bottom, I can take a photo with the home button oriented to the left or the right, I could even take a photo with the home button at the top - my phone upside down.\nWhen one takes a snap on a modern device, the device itself will factor in orientation and store a little snippet of information along with the image in what\u0026rsquo;s called Exif metadata. So when I\u0026rsquo;m flicking through the gallery on my phone, I tend to see my images oriented correctly. When I transfer them to my computer, the same is true when I\u0026rsquo;m looking at them in the file system. Both devices know that despite the orientation of my phone at the time of taking the picture, I want to see the image as it was taken in reality. This is the most common expected user experience, and our devices are very good at intuiting how we\u0026rsquo;d like to see these images.\nThat said, here\u0026rsquo;s a photo of a duck:\nMy phone and laptop know to show me this image the right way up, but Hugo doesn\u0026rsquo;t (yet).\nThe above photo was added directly to my site offline via a text editor. A simple copy and paste from one folder to another. No magic is happening, because there\u0026rsquo;s no room for it to.\nNext, we\u0026rsquo;ll try adding the same image via Forestry (HugoModo\u0026rsquo;s benchmark for compatibility):\nThe same image again, still displayed with incorrect orientation by default. And it looks as though Forestry currently lacks native image editing or processing capabilities (although it sounds like they have it in the works, as well).\nWe have some options\u0026hellip; Hugo\u0026rsquo;s image processing functionality does already provide the possibility to rotate images, but this must currently be done manually and per image - as noted above, it seems Hugo yet lacks awareness of Exif info. This could be a cumbersome undertaking for an end user with a photo gallery on their site, particularly if they have no development experience.\nHugo is set to gain that information, with a working implementation already. But it looks like we\u0026rsquo;re waiting on an upstream bugfix before it finds its way into a release.\nSo I will revisit this at that time.\nFortunately, for now, there is another way. Forestry have a partnership with the actually phenomenal image storage service, Cloudinary who I believe handle this issue by default.\nOne final test. Here\u0026rsquo;s that duck again:\nOops. The orientation of our duck here was corrected in both Forestry and Cloudinary\u0026rsquo;s media dashboards, but is still showing sideways in our content.\nSo as a final correction, it looks like we still have to adjust that URL. Not ideal. But this is where Cloudinary shines.\nCloudinary takes a parameter for the angle of an image like so:\nhttps://res.cloudinary.com/example/a_90/image.jpg  The a_90 tells Cloudinary we want that image rotated 90 degrees, and it will serve us just that.\nThis isn\u0026rsquo;t what we want in this case, as Cloudinary displays the image corrected by default, at least in the dashboard. So we add a_0 instead, to tell Cloudinary we want this image served the right way up:\nHey presto!\nIs this ideal? No. It still took some work to get us to this point, where we\u0026rsquo;d like to just upload our images and have 0 degrees be considered the default orientation.\nI will continue to look into this.\n","permalink":"https://hugomodo.github.io/blog/exif-orientation/","tags":null,"title":"Exif Orientation"},{"categories":null,"contents":"HugoModo is a collection of themes and extensions for the Hugo static site generator. The aim is to take the benefits of Hugo\u0026rsquo;s incredible speed and flexibility, and to achieve the same comforts and conventions of other frameworks. HugoModo aims to make Hugo the best of both worlds.\n","permalink":"https://hugomodo.github.io/","tags":null,"title":"A modular framework for Hugo"},{"categories":null,"contents":"Forestry has some configuration settings that will allow automatic builds whenever content is updated via their dashboard.\nI\u0026rsquo;ve just set this up and am publishing this post to check it out.\nAs Forestry remains our benchmark for compatibility, it will always be important that builds are successful from this source.\nUnfortunately, it appears that Forestry can only handle project-based GitHub Pages, rather than user or organisation ones - which is what we want for HugoModo.\nI will revisit this and document the approach for project-based sites at another time, but Forestry have a great guide themselves should you need it.\nFor the time being, where it comes to HugoModo, I\u0026rsquo;m going to see if deployment via a CI service such as TravisCI is feasible.\nAnd do you know what? It is. There are a lot of blog posts from others online with setups that vary in complexity. None are as simple as this:\n# Clean and don\u0026#39;t fail install: - rm -rf public || exit 0 # Build the website script: - bin/hugo deploy: provider: pages skip-cleanup: true github-token: $GITHUB_TOKEN # Set in the settings page of your repository, as a secure variable keep-history: true local-dir: public repo: hugomodo/hugomodo.github.io allow-empty-commit: true target-branch: master on: branch: master This is mostly TravisCI\u0026rsquo;s own suggested configuration for publishing to GitHub Pages, with the exception of adding the local-dir, repo, allow-empty-commit and target-branch options. These tell Travis to publish the contents of public to our separate GitHub Pages repo at hugomodo/hugomodo.github.io and to push those contents to the master branch. allow-empty-commit: true is added in case of build failure, so that the site can be rebuilt without changes.\nThe only other required setup is to add a GitHub token to the repo config in TravisCI, and provide Hugo as a binary in the bin folder.\n","permalink":"https://hugomodo.github.io/docs/build-with-forestry/","tags":null,"title":"Build with Forestry"},{"categories":null,"contents":"One of the core principles of HugoModo is to stick to the Hugo way of doing things where possible and sensible to do so. This reduces the likelihood of incompatibility, and should make for greater ease of use for anyone familiar with Hugo or working from the Hugo documentation.\nOf course, HugoModo deliberately does a lot differently, emphasising the principle of Convention over Configuration where Hugo otherwise emphasises speed. The aim is to achieve a comfortable middle-ground that remains blazing fast, but that also provides for greater ease of use and extension.\nI just don\u0026rsquo;t yet know what to do about Chroma.\nChroma is Hugo\u0026rsquo;s in-built syntax highlighter, for rendering beautiful code samples like this one:\n{{ if .IsPage }} {{ .Content }} {{ end }} At the time of writing, this code sample is being interpreted by Chroma and displayed with inline style declarations.\nChroma has a couple of different flavours though. The default is these inline styles, but Hugo also provides a configuration option and CSS generator to serve Chroma syntax highlighting with classes used and styles served from a separate stylesheet.\nThing is, neither of these approaches is really the HugoModo way.\nAnother principle of HugoModo is HTML minimalism. By this I mean that the markup is intended to be clear of style declarations and class attributes. Unless strictly necessary, I believe that HTML should be free from both, with a CSS file doing the heavy lifting to style a page. If necessary later, an additional script should be invoked to inline above-the-fold styles, for instance. The point is separation of scope in development: HTML files should be strictly markup, CSS should have almost total authority when it comes to styling.\nHugoModo will continue to support Chroma for now. But I am beginning to wonder\u0026hellip; is it the HugoModo way?\n","permalink":"https://hugomodo.github.io/blog/the-trouble-with-chroma/","tags":null,"title":"The Trouble With Chroma, Hugo's Syntax Highlighting Library"},{"categories":null,"contents":" HugoModo Shortcode Partials Provides the default Hugo shortcodes as a collection of partials for use in templates.\nSupport on Beerpay Hey dude! Help me out for a couple of 🍻!\n \nWhat\u0026rsquo;s the issue? HugoModo strives for third-party compatibility. The baseline for this is currently Forestry CMS. When asking the question, \u0026ldquo;does it work with Forestry CMS?\u0026rdquo; of the Image Processing extension, the answer was not yes - it was mostly.\nThe problem is, Forestry is unaware of shortcodes. These could be hand-typed by a developer easily, but when it comes to non-technical authors adding images to content, they probably aren\u0026rsquo;t going to do that. And as a matter of usability, I also prefer to use the GUI to add content to a post. On Forestry, this results in a markdown declaration.\nNo assessment of the size of the image is performed, and so the result is the raw output of - more than likely - an oversized image.\nHugoModo Image Processing aims to circumvent that issue with an interpreter of its own for outputting content. But while this interpreter then succeeds in producing resized image resources, it breaks all of the other shortcodes that can be used in Hugo.\nThe solution HugoModo Shortcode Partials aims to provide all of the existing Hugo shortcodes as partials, as well as an override for content interpretation. This solves the problem above, and provides a clear best practise for adding additional shortcodes.\nThis is not recommended Where absolutely possible, it is better to do without overriding Hugo\u0026rsquo;s own .Content function. Using this shim and/or the Image Processing override may lead to a severe decrease in performance.\nIt is provided as a convenience, for anywhere markdown reinterpretation is preferred.\n","permalink":"https://hugomodo.github.io/extensions/shortcode-partials/","tags":null,"title":"Shortcode Partials"},{"categories":null,"contents":"HugoModo is designed to be compatible with the static site, headless CMS, Forestry.\nWhen you first hook a site up with Forestry, it assumes the same default behaviour that HugoModo does. In particular, this means images are stored in the static directory and are exempt from image processing.\nBut Forestry has offered configuration for using a content directory instead for quite a while now. Enabling this feature will store uploads as page resources, and will allow for the use of Hugo\u0026rsquo;s in-built image processing.\nThis can be activated in HugoModo by installing the HugoModo Image Processing extension.\nBy default, HugoModo Image Processing will assume the use of page bundles to store images. This is the de facto Hugo way, but is currently unsupported by Forestry. But just one extra step gets us to where we need to be.\nHugoModo Image Processing can be configured to look for and use any content directory for image resources.\nTo turn this on, simply add a file at data/imageProcessing/config.toml with the content:\nuploadsDir = \u0026#34;uploads\u0026#34; This can be any path you like, but the folder should exist in your site\u0026rsquo;s content directory, and should contain an index.md set to act as a headless bundle.\nThe following image has been uploaded in Forestry\u0026rsquo;s dashboard:\nUnfortunately, inline images cannot be added via the Forestry dashboard and handled automatically by HugoModo\u0026rsquo;s image processing shortcodes.\nThis is something I am looking to remedy. Watch this space.\n","permalink":"https://hugomodo.github.io/blog/forestry-compatible/","tags":null,"title":"Forestry Compatible"},{"categories":null,"contents":" HugoModo Image Processing Image Processing for Hugo sites.\nShim HugoModo Image Processing includes a collection of shims for providing the same image processing treatment to markdown in your site\u0026rsquo;s content.\nTo activate it, create a file in your Hugo site at data/config/imageProcessing.toml with the content:\ncontentShim = true This will break other shortcodes on your site, so you may also want to install HugoModo Shortcode Partials, which contains shims to fix some of the shortcodes.\nSupport on Beerpay Hey dude! Help me out for a couple of 🍻!\n \nDescription Features  Provides imgproc and figproc shortcodes for image processing in your content files. Uses srcset to load responsive image sizes on different screen resolutions. Can be configured to use Page Bundles, a headless Resources bundle, or both!  Todo  Equivalents for theme layouts are provided: image-processing/imgproc.html and image-processing/figproc.html.  These already exist. Modification required so that context can be passed.  Option to override existing figure shortcode. Additional imgcrop shortcode using .Fill image processing function to crop images to given dimensions. Potentially an imgfit shortcode as well, using .Fit. Could be useful for masonry layouts. Support for featured and thumbnail images in page frontmatter and site config. Support for opengraph and other meta tag images to be resized appropriately. Support for sizes attribute alongside srcset; allow this to be altered in config. Consider having minSize and maxSize settings in config and per proc.  Allowing these to be set where used will help to reduce repo bloat.  Add support for social and search graph image resizing.  opengraph schema twitter cards structured data   Installation From your Hugo site\u0026rsquo;s root directory:\nRecommended\ngit submodule add https://github.com/hugomodo/hugomodo-image-processing.git themes/hugomodo-image-processing Or:\ncd themes git clone https://github.com/hugomodo/hugomodo-image-processing.git Then add hugomodo-image-processing to your site\u0026rsquo;s themes in config.toml. Because it is considered an extension, it should be listed above any other HugoModo themes:\nthemes = [ \u0026#34;hugomodo-image-processing\u0026#34;, ... ] Configuration HugoModo Image Processing can be configured one of two ways. The default is to use Hugo\u0026rsquo;s Page Bundles, but an alternative approach using an uploads directory that provides compatibility with third party Content Management Systems can be setup with minimal configuration.\nPage Bundles By default, HugoModo Image Processing uses Page Bundles as described by the Hugo docs: Page Bundles\nNo additional configuration is required to use HugoModo Image Processing this way.\nUploads Directory You can configure HugoModo Image Processing to use an uploads directory instead, for compatibility with some Content Management Systems such as Forestry who write up the idea behind the uploads directory here: How To Use Hugo\u0026rsquo;s Image Processing With Forestry\nThe HugoModo implementation is a little bit different, but fully compatible with Forestry at the time of writing.\nTo set it up add a file to your site at data/imageProcessing/config.toml with the following configuration:\nuploadsDir = \u0026#34;uploads\u0026#34; \u0026hellip;and that\u0026rsquo;s it! You can now add your images to a content/uploads directory and have HugoModo\u0026rsquo;s image processing shortcodes will look for your resources there instead.\n\u0026hellip;or both! It is also possible to mix the two approaches. If the src string passed to imgproc contains a directory structure, it will look for your images in the given directory:\n{{\u0026lt; imgproc src=\u0026#34;/uploads/jakob-owens-212555-unsplash.jpg\u0026#34; \u0026gt;}} Shortcodes imgproc {{\u0026lt; imgproc src=\u0026#34;fabian-grohs-423591-unsplash.jpg\u0026#34; \u0026gt;}} figproc {{\u0026lt; figproc src=\u0026#34;fabian-grohs-423591-unsplash.jpg\u0026#34; caption=\u0026#34;Computer on a desk\u0026#34; \u0026gt;}}","permalink":"https://hugomodo.github.io/extensions/image-processing/","tags":null,"title":"Image Processing"},{"categories":null,"contents":" HugoModo Best Motherfucking Website Based on The Best Motherfucking Website, this theme provides minimal style definitions to create a clean, highly readable theme to be used as the base for customisation or for websites with a minimalist feel.\nInstallation Simple The recommended way to install and use the HugoModo Best Motherfucking Website theme is to install the latest standalone version as a Git Submodule using the -b 0.1.0-standalone flag:\ngit submodule add -b 0.1.0-standalone https://github.com/hugomodo/hugomodo-best-motherfucking-website themes/hugomodo-best-motherfucking-websitethemes = [\u0026#34;hugomodo-best-motherfucking-website\u0026#34;] Advanced Options Standalone If you\u0026rsquo;re happy targeting an edge branch, you can drop the version number when installing. Use the -b standalone flag:\ngit submodule add -b standalone https://github.com/hugomodo/hugomodo-best-motherfucking-website themes/hugomodo-best-motherfucking-website Original For the most advanced usage that will let you update the HugoModo core independently of the theme, install both independently using a versioned branch flag:\ngit submodule add -b 0.1.1 https://github.com/hugomodo/hugomodo themes/hugomodo git submodule add -b 0.1.0 https://github.com/hugomodo/hugomodo-best-motherfucking-website themes/hugomodo-best-motherfucking-website Note that you can also use -b master or forego the flag entirely to get the very latest edge version of each.\nSupport on Beerpay Hey dude! Help me out for a couple of 🍻!\n \n","permalink":"https://hugomodo.github.io/themes/best-motherfucking-website/","tags":["minimalist"],"title":"Best Motherfucking Website"},{"categories":null,"contents":" HugoModo The base theme for HugoModo\u0026rsquo;s modular approach to Hugo website design. It provides the asset precompilation pipeline and bundler data files, clean and semantic HTML, and well-organised partials for ease of developing child themes.\nIt provides minimal styling, so is best used as the base for a child theme. HugoModo themes which depend on it will include this theme automatically.\nInstallation git submodule add https://github.com/hugomodo/hugomodo themes/hugomodothemes = [\u0026#34;hugomodo\u0026#34;] Support on Beerpay Hey dude! Help me out for a couple of 🍻!\n \n","permalink":"https://hugomodo.github.io/themes/hugomodo/","tags":["semantic html5"],"title":"Hugomodo"},{"categories":null,"contents":" Hugo All of the standard Hugo shortcodes work with HugoModo by default.\nThose listed below also work with the shims provided by the Shortcode Partials extension.\nfigure Markup {{\u0026lt; figure src=\u0026#34;/img/mountaineer.jpg\u0026#34; title=\u0026#34;A walk with a view.\u0026#34; \u0026gt;}} Example   A walk with a view.   gist Markup {{\u0026lt; gist spf13 7896402 \u0026gt;}} Example  highlight Markup {{\u0026lt; highlight go-html-template \u0026gt;}} \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{\u0026lt; /highlight \u0026gt;}} Example \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; Note: If you use one of the content shims provided by a HugoModo extension, the above shortcode example will fail. You should opt for markdown code fences instead. Check out the Hugo docs for setup instructions: Highlight in Code Fences.\n}} ``` #### Example   View this post on Instagram        #Talitha #Getty #yacht in #fjærland #fjærlandsfjorden #sognefjorden #mundal #norway #landscape #panorama #travel #instagoodmyphoto #justgoshoot #peoplescreatives #visualsoflife #photography #photoshoot #photodaily #photogram #instagood #picoftheday #fjærland #photooftheday #pentax #nrksf #sognavis\nA post shared by Bjørn Erik Pedersen (@bepsays) on Jul 6, 2017 at 9:27am PDT\n  ### param *Requires Hugo version 0.52 or higher* #### Markup ``` html {{}} ``` #### Example Built-in Hugo shortcodes and custom shortcodes provided by HugoModo. ### ref and relref #### Markup ``` markdown [Hugo Goes Modular]({{}}) [List Pages]({{}}) ``` #### Example [Hugo Goes Modular](https://hugomodo.github.io/blog/hugo-goes-modular/) [List Pages](/blog/hugo-goes-modular/#list-pages) ### tweet #### Markup ``` html {{}} ``` #### Example Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays\n\u0026mdash; GoHugo.io (@GoHugoIO) June 21, 2017  ### vimeo #### Markup ``` html {{}} ``` #### Example   ### youtube #### Markup ``` html {{}} ``` #### Example   --- HugoModo HugoModo will extend the standard set of shortcodes. Take a look at the extensions library for a complete list.\n","permalink":"https://hugomodo.github.io/docs/shortcodes/","tags":null,"title":"Shortcodes"},{"categories":null,"contents":"The latest news from the HugoModo project.\n","permalink":"https://hugomodo.github.io/blog/","tags":null,"title":"Blog"},{"categories":null,"contents":" A Better Base HugoModo removes the main content div from Hugo\u0026rsquo;s default base template, and adds a new partial called the \u0026lsquo;foot\u0026rsquo;. The aim is to follow certain best practices. We want to keep markup to a minimum, and where possible to only use HTML5\u0026rsquo;s semantic elements (\u0026lsquo;main\u0026rsquo;, \u0026lsquo;section\u0026rsquo;, etc. rather than \u0026lsquo;div\u0026rsquo;). And the foot partial is provided mainly to load scripts after the main content, so as to provide for fast page rendering to visitors.\nThe Hugo Way \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . -}} \u0026lt;body\u0026gt; {{- partial \u0026#34;header.html\u0026#34; . -}} \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{- end }} \u0026lt;/div\u0026gt; {{- partial \u0026#34;footer.html\u0026#34; . -}} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The HugoModo Way \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . -}} \u0026lt;body\u0026gt; {{- partial \u0026#34;header.html\u0026#34; . -}} {{- block \u0026#34;main\u0026#34; . }}{{- end }} {{- partial \u0026#34;footer.html\u0026#34; . -}} {{- partial \u0026#34;foot.html\u0026#34; . -}} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Theme Partial Organisation Hugo themes are easy to extend and make adjustments to by overwriting partials. Many themes however are comprised of partials that do an enormous amount. In order to change one small detail, the entire partial must be copied across. And if the base theme then receives an update, it can be a chore to find small changes in those files to upgrade your child theme or site.\nHugoModo aims to solve this problem by reducing partials to tightly scoped directories. Rather than having one \u0026lsquo;head\u0026rsquo; partial, HugoModo\u0026rsquo;s \u0026lsquo;head\u0026rsquo; calls on many child partials in partials/head. Any one can be overwritten without throwing the rest of the theme out of sync with the upstream, meaning easier upgrades and lower maintenance over time.\nList Pages Because Hugo builds sites that reflect the directory structure of its content files precisely, it is easy to create deeply nested pages.\nThere is no list page behaviour by default, but the standard practise is to just list .RegularPages for each section. However, this is a poor reflection of Hugo\u0026rsquo;s fuller capabilities which allows for sections inside of sections, and deeply nested collections of pages.\nHugoModo includes a default list template that combines and sorts a section\u0026rsquo;s child sections and pages, listing and paginating them together.\nSuperior Asset Bundling Hugo hasn\u0026rsquo;t always had great support for CSS and JavaScript assets. It still doesn\u0026rsquo;t have the greatest, but it\u0026rsquo;s moving in the right direction.\nHugoModo gives Hugo a gentle nudge slightly further. It uses Hugo\u0026rsquo;s support for data files to provide a single location where JavaScript and SASS resources may be listed. The included js and scss resource partials read these resource lists, concatenate and minify the named files.\nIt\u0026rsquo;s a lot like Ruby\u0026rsquo;s Bundler, or NPM. Basically a pseudo package manager for Hugo. It\u0026rsquo;s awesome!\nAnd this is where HugoModo gets truly modular. Regardless of how many child themes or extensions you invoke in your site, the resource bundler collects all of the associated assets and bundles them for you.\n","permalink":"https://hugomodo.github.io/blog/hugo-goes-modular/","tags":null,"title":"Hugo Goes Modular"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/docs/","tags":null,"title":"Docs"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/extensions/","tags":null,"title":"Extensions"},{"categories":null,"contents":"","permalink":"https://hugomodo.github.io/themes/","tags":null,"title":"Themes"}]